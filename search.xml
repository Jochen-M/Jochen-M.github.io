<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Ubuntu下利用Apache2部署多个站点]]></title>
      <url>/2017/11/06/Ubuntu%E4%B8%8B%E5%88%A9%E7%94%A8Apache2%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E7%AB%99%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="关于Apache2"><a href="#关于Apache2" class="headerlink" title="关于Apache2"></a>关于Apache2</h3><h4 id="Ubuntu下安装Apache2"><a href="#Ubuntu下安装Apache2" class="headerlink" title="Ubuntu下安装Apache2"></a>Ubuntu下安装Apache2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure>
<p>安装完成后，所有配置文件都在/etc/apache2/目录下。</p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>apache2在启动的时候自动读取/etc/apache2/apache2.conf文件的配置信息，不同的配置项按功能分布在不同的文件中，然后被Include包含到apache2.conf这个主配置文件中，方便管理。就是说事实上apache2主配置文件只有一个，即apache2.conf，其他的都是被include进来的。可以把所有的配置都放在apache2.conf或者任何一个配置文件中，但是划分到不同文件会让我们管理起来方便很多。</p>
<h4 id="apache2目录结构"><a href="#apache2目录结构" class="headerlink" title="apache2目录结构"></a>apache2目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── apache2.conf    全局配置</div><div class="line">├── conf-available  可用的配置文件</div><div class="line">├── conf-enabled    已启用的配置文件</div><div class="line">├── envvars         环境变量</div><div class="line">├── magic</div><div class="line">├── mods-available  已安装的模块</div><div class="line">├── mods-enabled    已启用的模块</div><div class="line">├── ports.conf      http服务端口信息</div><div class="line">├── sites-available 可用站点信息</div><div class="line">├── sites-enabled   已经启用的站点信息，当中的文件是到/etc/apache2/sites-available/ 文件的软连接。</div></pre></td></tr></table></figure>
<p>其中，apache2.conf是apache2的主配置文件，包括三个级别的配置。</p>
<ul>
<li>控制apache服务器执行过程的全局配置。</li>
<li>定义主服务或者默认服务器的参数的配置，这些配置会响应virtual host不处理的请求。这类配置也为所有的virtual hosts配置提供默认值。</li>
<li>virtual hosts相关的配置，使得同一个apache服务进程处理向不同IP地址或者主机名发送的请求。</li>
</ul>
<h3 id="Apache2配置介绍"><a href="#Apache2配置介绍" class="headerlink" title="Apache2配置介绍"></a>Apache2配置介绍</h3><p>初始情况下，Apache2主配置文件/etc/apache2/apache2.conf。其最后两行为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Include the virtual host configurations:</div><div class="line">IncludeOptional sites-enabled/*.conf</div></pre></td></tr></table></figure></p>
<p>显然/etc/apache2/sites-enabled下存放着有关虚拟站点（VirtualHost）的配置。经查看，初始情况下，该目录下包含一个符号链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">000-default.conf -&gt; ../sites-available/000-default.conf</div></pre></td></tr></table></figure></p>
<p>这里又引出另外一个配置目录：/etcc/apache2/sites-available。这个目录下放置了所有可用站点的真正配置文件，对于Enabled的站点，Apache2在sites-enabled目录建立一个到sites-available目录下文件的符号链接。</p>
<p>/etc/apache2/sites-available下有两个文件：000-default.conf和default-ssl.conf。000-default链接的文件为000-default.conf。</p>
<p>以000-default.conf为例，看看一个VirtualHost的配置是啥样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">	# The ServerName directive sets the request scheme, hostname and port that</div><div class="line">	# the server uses to identify itself. This is used when creating</div><div class="line">	# redirection URLs. In the context of virtual hosts, the ServerName</div><div class="line">	# specifies what hostname must appear in the request&apos;s Host: header to</div><div class="line">	# match this virtual host. For the default virtual host (this file) this</div><div class="line">	# value is not decisive as it is used as a last resort host regardless.</div><div class="line">	# However, you must set it for any further virtual host explicitly.</div><div class="line">	#ServerName www.example.com</div><div class="line"></div><div class="line">	ServerAdmin webmaster@localhost</div><div class="line">	DocumentRoot /var/www/html</div><div class="line"></div><div class="line">  &lt;Directory &quot;/var/www/html&quot;&gt;</div><div class="line">  	  AllowOverride All</div><div class="line">	&lt;/Directory&gt;</div><div class="line"></div><div class="line">	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</div><div class="line">	# error, crit, alert, emerg.</div><div class="line">	# It is also possible to configure the loglevel for particular</div><div class="line">	# modules, e.g.</div><div class="line">	#LogLevel info ssl:warn</div><div class="line"></div><div class="line">	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line"></div><div class="line">	# For most configuration files from conf-available/, which are</div><div class="line">	# enabled or disabled at a global level, it is possible to</div><div class="line">	# include a line for only one particular virtual host. For example the</div><div class="line">	# following line enables the CGI configuration for this host only</div><div class="line">	# after it has been globally disabled with &quot;a2disconf&quot;.</div><div class="line">	#Include conf-available/serve-cgi-bin.conf</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<p>DocumentRoot是这个站点的根目录，这样Apache2启动时会扫描/etc/apache2/sites-enabled中可用的站点配置并加载。当用户访问localhost:80时，Apache2就将default站点根目录/var/www/html下的index.html作为请求的响应返回给浏览器。</p>
<h3 id="利用Apache2部署多个站点"><a href="#利用Apache2部署多个站点" class="headerlink" title="利用Apache2部署多个站点"></a>利用Apache2部署多个站点</h3><p>Apache2的默认站点我们不要去动它，我们新增站点配置来满足我们的要求。我们可能有两类需求：</p>
<ul>
<li>根据不同的域名访问不同的站点</li>
<li>在相同域名地址的情况下，通过访问不同的端口获得不同的站点</li>
</ul>
<h4 id="第一种需求"><a href="#第一种需求" class="headerlink" title="第一种需求"></a>第一种需求</h4><p>第一种需求讲的是我要在一个Apache2服务器上配置两个站点：site1.com和site2.com。</p>
<p>我们可以按照下面步骤来做：</p>
<h5 id="建立配置文件"><a href="#建立配置文件" class="headerlink" title="建立配置文件"></a>建立配置文件</h5><p>在sites-available中建立两个站点的配置文件site1_com和site2_com：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp 000-default.conf site1_com.conf</div><div class="line">sudo cp 000-default.conf site2_com.conf</div></pre></td></tr></table></figure></p>
<h5 id="编辑这两个配置文件，以site1-com为例"><a href="#编辑这两个配置文件，以site1-com为例" class="headerlink" title="编辑这两个配置文件，以site1_com为例"></a>编辑这两个配置文件，以site1_com为例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">	# The ServerName directive sets the request scheme, hostname and port that</div><div class="line">	# the server uses to identify itself. This is used when creating</div><div class="line">	# redirection URLs. In the context of virtual hosts, the ServerName</div><div class="line">	# specifies what hostname must appear in the request&apos;s Host: header to</div><div class="line">	# match this virtual host. For the default virtual host (this file) this</div><div class="line">	# value is not decisive as it is used as a last resort host regardless.</div><div class="line">	# However, you must set it for any further virtual host explicitly.</div><div class="line">	ServerName site1.com</div><div class="line"></div><div class="line">	ServerAdmin webmaster@localhost</div><div class="line">	DocumentRoot /var/www/site1_com</div><div class="line"></div><div class="line">  &lt;Directory &quot;/var/www/site1_com&quot;&gt;</div><div class="line">  	  AllowOverride All</div><div class="line">	&lt;/Directory&gt;</div><div class="line"></div><div class="line">	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</div><div class="line">	# error, crit, alert, emerg.</div><div class="line">	# It is also possible to configure the loglevel for particular</div><div class="line">	# modules, e.g.</div><div class="line">	#LogLevel info ssl:warn</div><div class="line"></div><div class="line">	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line"></div><div class="line">	# For most configuration files from conf-available/, which are</div><div class="line">	# enabled or disabled at a global level, it is possible to</div><div class="line">	# include a line for only one particular virtual host. For example the</div><div class="line">	# following line enables the CGI configuration for this host only</div><div class="line">	# after it has been globally disabled with &quot;a2disconf&quot;.</div><div class="line">	#Include conf-available/serve-cgi-bin.conf</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<p>注意上面配置中：ServerName、DocumentRoot是我们重点关注的配置点。site1的ServerName为site1.com，根目录为/var/www/site1_com。(site2_com.conf也做同样的改动)</p>
<h5 id="在sites-enabled目录下建立符号链接"><a href="#在sites-enabled目录下建立符号链接" class="headerlink" title="在sites-enabled目录下建立符号链接"></a>在sites-enabled目录下建立符号链接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /etc/apache2/sites-available/site1_com.conf /etc/apache2/sites-enabled/site1_com.conf</div><div class="line">sudo ln -s /etc/apache2/sites-available/site2_com.conf /etc/apache2/sites-enabled/site2_com.conf</div></pre></td></tr></table></figure>
<h5 id="部署项目（以Angular2项目为例）"><a href="#部署项目（以Angular2项目为例）" class="headerlink" title="部署项目（以Angular2项目为例）"></a>部署项目（以Angular2项目为例）</h5><ul>
<li>使用ng build命令，将web项目编译成静态文件；</li>
<li>将dist/文件夹拷贝到/var/www/目录下，重命名为site1_com和site2_com；</li>
<li><p>在site1_com目录下新建文件.htaccess，以重构路由:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">	  RewriteEngine On</div><div class="line">    RewriteBase /</div><div class="line">	  RewriteRule ^index\.html$ - [L]</div><div class="line">	  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line">	  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line">	  RewriteRule . /index.html [L]</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重写apache2配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo a2enmod rewrite</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="重启Apache2使配置生效"><a href="#重启Apache2使配置生效" class="headerlink" title="重启Apache2使配置生效"></a>重启Apache2使配置生效</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 restart</div><div class="line">或</div><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure>
<h5 id="修改-etc-hosts文件，便于测试。"><a href="#修改-etc-hosts文件，便于测试。" class="headerlink" title="修改/etc/hosts文件，便于测试。"></a>修改/etc/hosts文件，便于测试。</h5><p>添加如下两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1   site1.com</div><div class="line">127.0.0.1   site2.com</div></pre></td></tr></table></figure></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>打开浏览器，输入<a href="http://site1.com，即可看到我们的网站。" target="_blank" rel="external">http://site1.com，即可看到我们的网站。</a></p>
<h4 id="第二种需求"><a href="#第二种需求" class="headerlink" title="第二种需求"></a>第二种需求</h4><p>第二类需求是希望通过端口号来区分虚拟站点。</p>
<h5 id="首先我们得让apache2监听端口8081和8082"><a href="#首先我们得让apache2监听端口8081和8082" class="headerlink" title="首先我们得让apache2监听端口8081和8082"></a>首先我们得让apache2监听端口8081和8082</h5><p>修改/etc/apache2/ports.conf，增加两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Listen 8081</div><div class="line">Listen 8082</div></pre></td></tr></table></figure></p>
<h5 id="修改site1-com-conf和site2-com-conf："><a href="#修改site1-com-conf和site2-com-conf：" class="headerlink" title="修改site1_com.conf和site2_com.conf："></a>修改site1_com.conf和site2_com.conf：</h5><p>以site2_com为例,将监听的端口改为8082，ServerName改为site.com。（site1_com同理。）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:8082&gt;</div><div class="line">	# The ServerName directive sets the request scheme, hostname and port that</div><div class="line">	# the server uses to identify itself. This is used when creating</div><div class="line">	# redirection URLs. In the context of virtual hosts, the ServerName</div><div class="line">	# specifies what hostname must appear in the request&apos;s Host: header to</div><div class="line">	# match this virtual host. For the default virtual host (this file) this</div><div class="line">	# value is not decisive as it is used as a last resort host regardless.</div><div class="line">	# However, you must set it for any further virtual host explicitly.</div><div class="line">	ServerName site.com</div><div class="line"></div><div class="line">	ServerAdmin webmaster@localhost</div><div class="line">	DocumentRoot /var/www/site2_com</div><div class="line"></div><div class="line">  &lt;Directory &quot;/var/www/site2_com&quot;&gt;</div><div class="line">  	  AllowOverride All</div><div class="line">	&lt;/Directory&gt;</div><div class="line"></div><div class="line">	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</div><div class="line">	# error, crit, alert, emerg.</div><div class="line">	# It is also possible to configure the loglevel for particular</div><div class="line">	# modules, e.g.</div><div class="line">	#LogLevel info ssl:warn</div><div class="line"></div><div class="line">	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line"></div><div class="line">	# For most configuration files from conf-available/, which are</div><div class="line">	# enabled or disabled at a global level, it is possible to</div><div class="line">	# include a line for only one particular virtual host. For example the</div><div class="line">	# following line enables the CGI configuration for this host only</div><div class="line">	# after it has been globally disabled with &quot;a2disconf&quot;.</div><div class="line">	#Include conf-available/serve-cgi-bin.conf</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>
<h5 id="修改-etc-hosts文件，便于测试。-1"><a href="#修改-etc-hosts文件，便于测试。-1" class="headerlink" title="修改/etc/hosts文件，便于测试。"></a>修改/etc/hosts文件，便于测试。</h5><p>添加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1   site.com</div></pre></td></tr></table></figure></p>
<h5 id="重启Apache2使配置生效-1"><a href="#重启Apache2使配置生效-1" class="headerlink" title="重启Apache2使配置生效"></a>重启Apache2使配置生效</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 restart</div><div class="line">或</div><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure>
<h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>访问<a href="http://site.com:8082即可看到我们的网站。" target="_blank" rel="external">http://site.com:8082即可看到我们的网站。</a></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迪杰斯特拉]]></title>
      <url>/2017/09/16/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#include &lt;climits&gt;</div><div class="line">void ShortestPath_DIJ(MGraph &amp;G, int v0, PathMatrix &amp;P, ShortPathTable &amp;D) &#123;</div><div class="line">    for(v = 0; v &lt; G.length; ++v) &#123;</div><div class="line">        final[v] = FALSE;     // final 为 TRUE 表示已经找到最短路径</div><div class="line">        D[v] = G[v0][v];      // D[v] 为 v0 到 v 的最短距离</div><div class="line">        for(w = 0; w &gt; G.length; w++) &#123;</div><div class="line">            P[v][w] = FALSE;  // P[v][w] 为 TRUE 表示从 v0 到 v 的最短路径经过 w</div><div class="line">        &#125;</div><div class="line">        if(D[v] &lt; INT_MAX) &#123;</div><div class="line">            P[v][v0] = TRUE;</div><div class="line">            P[v][v] = TRUE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    D[v0] = 0; final[v0] = TRUE;</div><div class="line"></div><div class="line">    for(i = 1; i &lt; G.length; i++) &#123;</div><div class="line">        min = INT_MAX;</div><div class="line">        for(w = 0; w &lt; G.length; w++) &#123;</div><div class="line">            if(!final[w]) &#123;</div><div class="line">                if(D[w] &lt; INT_MAX) &#123;</div><div class="line">                    v = w;</div><div class="line">                    min = D[w];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        final[w] = TRUE;</div><div class="line">        for(w = 0; w &lt; G.length; w++) &#123;</div><div class="line">            if(!final[w] &amp;&amp; (min + G[v][w] &lt; D[w])) &#123;</div><div class="line">                D[w] = min + G[v][w];</div><div class="line">                P[w] = v;</div><div class="line">                p[w][w] = TRUE;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[合并两个排序的链表]]></title>
      <url>/2017/09/14/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line">public class Solution &#123;</div><div class="line">    public ListNode Merge(ListNode list1,ListNode list2) &#123;</div><div class="line">        ListNode p1 = list1;</div><div class="line">        ListNode p2 = list2;</div><div class="line">        ListNode p3 = null;</div><div class="line">        ListNode newList = null;</div><div class="line"></div><div class="line">        if(list1 == null) &#123;</div><div class="line">            return list2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if(list2 == null) &#123;</div><div class="line">            return list1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if(p1.val &lt; p2.val) &#123;</div><div class="line">            newList = p1;</div><div class="line">            p1 = p1.next;</div><div class="line">        &#125; else &#123;</div><div class="line">            newList = p2;</div><div class="line">            p2 = p2.next;</div><div class="line">        &#125;</div><div class="line">        p3 = newList;</div><div class="line"></div><div class="line">        while(p1 != null &amp;&amp; p2 != null) &#123;</div><div class="line">            if(p1.val &lt; p2.val) &#123;</div><div class="line">                p3.next = p1;</div><div class="line">                p1 = p1.next;</div><div class="line">            &#125; else &#123;</div><div class="line">                p3.next = p2;</div><div class="line">                p2 = p2.next;</div><div class="line">            &#125;</div><div class="line">            p3 = p3.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if(p1 != null) &#123;</div><div class="line">            p3.next = p1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if(p2 != null) &#123;</div><div class="line">            p3.next = p2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return newList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[调整数组顺序使奇数位于偶数前面]]></title>
      <url>/2017/09/09/%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
<p><strong>分析:</strong></p>
<ol>
<li>要想保证原有次序，则只能顺次移动或相邻交换。</li>
<li>i从左向右遍历，找到第一个偶数。</li>
<li>j从i+1开始向后找，直到找到第一个奇数。</li>
<li>将[i,…,j-1]的元素整体后移一位，最后将找到的奇数放入i位置，然后i++。</li>
<li>终止条件：j向后遍历查找失败，即第一个偶数i后没有奇数。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void reOrderArray(int [] array) &#123;</div><div class="line">        int len = array.length;</div><div class="line">        for(int i = 0; i &lt; len; i++) &#123;</div><div class="line">            if(array[i] % 2 == 0) &#123;</div><div class="line">                int j = i + 1;</div><div class="line">                for(; j &lt; len; j++) &#123;</div><div class="line">                    if(array[j] % 2 == 1) &#123;</div><div class="line">                        int temp = array[j];</div><div class="line">                        for(int k = j - 1; k &gt;= i; k--) &#123;</div><div class="line">                            array[k + 1] = array[k];</div><div class="line">                        &#125;</div><div class="line">                        array[i] = temp;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                if(j == len) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[链表中倒数第k个结点]]></title>
      <url>/2017/09/09/%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>输入一个链表，输出该链表中倒数第k个结点。</p>
<p><strong>分析：</strong></p>
<p>这题比较笨的方法是将链表逆转，再查找第k个元素。参考<a href="https://jochen-m.github.io/2017/09/04/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/">从尾到头打印链表</a>。</p>
<p><strong>比较巧妙的方法是：</strong></p>
<p>采用两个指针，开始时都指向头节点。首先第一个指针向前移动k步（如果可以移动k步），然后两个指针同时向前移动，当第一个指针指向null时，第二个指针就指向了倒数第k个元素。妙哉~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line">public class Solution &#123;</div><div class="line">    public ListNode FindKthToTail(ListNode head,int k) &#123;</div><div class="line">        if(head == null || k &lt;= 0)</div><div class="line">            return null;</div><div class="line"></div><div class="line">        ListNode left = head;</div><div class="line">        ListNode right = head;</div><div class="line"></div><div class="line">        for(int i = 0; i &lt; k; i++) &#123;</div><div class="line">            if(right == null)</div><div class="line">                return null;</div><div class="line">            right = right.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        while(right != null) &#123;</div><div class="line">            right = right.next;</div><div class="line">            left = left.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[矩形覆盖]]></title>
      <url>/2017/09/09/%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</url>
      <content type="html"><![CDATA[<p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>
<p><em>注：</em> 本题类似于<a href="https://jochen-m.github.io/2017/09/04/%E8%B7%B3%E5%8F%B0%E9%98%B6/">跳台阶</a>，同属斐波那契数列问题。</p>
<p><strong>分析：</strong></p>
<p>f(0) = 0<br>f(1) = 1<br>f(2) = 2<br>f(3) = f(3-1) + f(3-2)   // f(3) = 第一个位置竖着放的方法数 + 第一个位置横着放的方法数。f(3-1)表示第一个位置竖放一个矩形后，还有(3-1)个位置可以放置矩形，f(3-2)表示第一个位置竖放两个矩形后，还有(3-2)个位置可以放置矩形。<br>…<br>f(n) = f(n-1) + f(n-2)</p>
<p><strong>Java实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int RectCover(int target) &#123;</div><div class="line">        if(target &lt;= 2)</div><div class="line">            return target;</div><div class="line">        return RectCover(target - 1) + RectCover(target - 2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[旋转数组的最小数字]]></title>
      <url>/2017/09/09/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p>
<p>分析：<br>采用二分法解答这个问题</p>
<p>mid = low + (high - low)/2</p>
<p>需要考虑三种情况：</p>
<ul>
<li><p>array[mid] &gt; array[high]:</p>
<p>出现这种情况的array类似[3,4,5,6,0,1,2]，此时最小数字一定在mid的右边。</p>
<p>low = mid + 1</p>
</li>
<li><p>array[mid] == array[high]:</p>
<p>出现这种情况的array类似 [1,0,1,1,1] 或者[1,1,1,0,1]，此时最小数字不好判<br>断在mid左边还是右边,只好一个一个试。</p>
<p>high = high - 1</p>
</li>
<li><p>array[mid] &lt; array[high]:</p>
<p>出现这种情况的array类似[2,2,3,4,5,6,6],此时最小数字一定就是array[mid]或者在mid的左边。因为右边必然都是递增的。</p>
<p>high = mid</p>
</li>
</ul>
<p><em>注意</em>：如果待查询的范围最后只剩两个数，那么mid一定会指向下标靠前的数字。如果 high = mid - 1，就会产生错误，因此high = mid。但第一种情形中low = mid + 1就不会错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">public class Solution &#123;</div><div class="line">    public int minNumberInRotateArray(int [] array) &#123;</div><div class="line">        if(array.length == 0)</div><div class="line">            return 0;</div><div class="line"></div><div class="line">        int len  = array.length;</div><div class="line">        int low  = 0;</div><div class="line">        int high = len - 1;</div><div class="line"></div><div class="line">        while(low &lt; high) &#123;</div><div class="line">            int mid  = low + (high - low) / 2;</div><div class="line">            if(array[mid] &gt; array[high]) &#123;</div><div class="line">                low = mid + 1;</div><div class="line">            &#125;else if(array[mid] == array[high]) &#123;</div><div class="line">                high--;</div><div class="line">            &#125;else &#123;</div><div class="line">                high = mid;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return array[low];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二进制中1的个数]]></title>
      <url>/2017/09/08/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>输入一个整数,输出该数二进制表示中1的个数.其中负数用补码表示.</p>
<p>分析如下：</p>
<p>如果一个整数不为0,那么这个整数至少有一位是1.如果我们把这个整数减1,那么原来处在整数最右边的1就会变为0,原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话).其余所有位将不会受到影响.</p>
<p>举个例子：一个二进制数1100,从右边数起第三位是处于最右边的一个1.减去1后,第三位变成0,它后面的两位0变成了1,而前面的1保持不变,因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了.这个时候如果我们再把原来的整数和减去1之后的结果做与运算,从原来整数最右边一个1那一位开始所有位都会变成0.如1100&amp;1011=1000.也就是说,把一个整数减去1,再和原整数做与运算,会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1,就可以进行多少次这样的操作.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int NumberOf1(int n) &#123;</div><div class="line">        int count = 0;</div><div class="line">        while(n != 0)&#123;</div><div class="line">            count++;</div><div class="line">            n = (n - 1) &amp; n;</div><div class="line">        &#125;</div><div class="line">        return count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[变态跳台阶]]></title>
      <url>/2017/09/08/%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">f(0) = 1                  // 当n=0时，只有1种跳法</div><div class="line">f(1) = 1                  // 当n=1时，也只有1种跳法</div><div class="line">f(2) = f(2-1) + f(2-2)    // 当n=2时，跳法数为：第一次跳1级台阶后的方法数 + 第一次跳2级台阶后的方法数</div><div class="line">f(3) = f(3-1) + f(3-2) + f(3-3)</div><div class="line">...</div><div class="line">f(n) = f(n-1) + f(n-2) + ... + f(n-n)</div><div class="line">     = f(0) + f(1) + f(2) + ... + f(n-1)</div><div class="line"></div><div class="line">由于： f(n-1) = f(0) + f(1) + f(2) + ... + f(n-2)</div><div class="line">因此： f(n) = f(n-1) + f(n-1)</div><div class="line">           = 2 * f(n-1)</div><div class="line"></div><div class="line">结论：</div><div class="line">       | 1, n=0</div><div class="line">f(n) = | 1, n=1</div><div class="line">       | 2 * f(n-1), n&gt;1</div></pre></td></tr></table></figure>
<h4 id="组合数学之隔板法"><a href="#组合数学之隔板法" class="headerlink" title="组合数学之隔板法"></a>组合数学之隔板法</h4><p><strong>这个问题相当于：</strong><br><br>在一排放置的n个球之间插入隔板，可以插入0～n-1个隔板，共有多少种插法。</p>
<p><strong>回到本题：</strong><br><br>n级台阶最少跳一次，最多跳n次<br><br>其中：<br><br>1次跳完的方法数为C<sup>0</sup><sub>n-1</sub><br><br>2次跳完的方法数为C<sup>1</sup><sub>n-1</sub><br><br>3次跳完的方法数为C<sup>2</sup><sub>n-1</sub><br><br>…<br><br>n次跳完的方法数为C<sup>n-1</sup><sub>n-1</sub><br></p>
<p><strong>根据定理：</strong><br><br>C<sup>0</sup><sub>n-1</sub> + C<sup>0</sup><sub>n-1</sub> + … + C<sup>n-1</sup><sub>n-1</sub> = 2<sup>n-1</sup></p>
<p><strong>所以：</strong><br><br>f(n) = 2<sup>n-1</sup><br><br>f(n-1) = 2<sup>n-2</sup><br></p>
<p><strong>结论：</strong><br><br>f(n) = 2 * f(n-1), 其中：f(0)=f(1)=1</p>
<h4 id="Java实现："><a href="#Java实现：" class="headerlink" title="Java实现："></a>Java实现：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int JumpFloorII(int target) &#123;</div><div class="line">        if(target == 0)</div><div class="line">            return 1;</div><div class="line">        if(target == 1)</div><div class="line">            return 1;</div><div class="line">        return JumpFloorII(target - 1) * 2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用两个栈实现队列]]></title>
      <url>/2017/09/05/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import java.util.Stack;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();</div><div class="line">    Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();</div><div class="line"></div><div class="line">    public void push(int node) &#123;</div><div class="line">        stack1.push(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int pop() &#123;</div><div class="line">        if(stack2.empty())&#123;</div><div class="line">            while(!stack1.empty())&#123;</div><div class="line">                stack2.push(stack1.pop());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return stack2.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[斐波那契数列]]></title>
      <url>/2017/09/05/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。(n&lt;=39)</p>
<p>某位大神的C++动态规划，mark一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int Fibonacci(int n) &#123;</div><div class="line">        int f = 0, g = 1;</div><div class="line">        while(n--) &#123;</div><div class="line">            g += f;</div><div class="line">            f = g - f;</div><div class="line">        &#125;</div><div class="line">        return f;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跳台阶]]></title>
      <url>/2017/09/04/%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2);</div><div class="line"> * a.假定第一次跳的是1阶，那么剩下的是n-1个台阶，跳法是f(n-1);</div><div class="line"> * c.可以得出总跳法为: f(n) = f(n-1) + f(n-2);</div><div class="line"> * d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2;</div><div class="line"> * e.可以发现最终得出的是一个斐波那契数列：</div><div class="line"> *         | 1, (n=1)</div><div class="line"> * f(n) =  | 2, (n=2)</div><div class="line"> *         | f(n-1)+f(n-2) ,(n&gt;2,n为整数)</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    public int JumpFloor(int target) &#123;</div><div class="line">        if(target == 1)</div><div class="line">            return 1;</div><div class="line"></div><div class="line">        if(target == 2)</div><div class="line">            return 2;</div><div class="line"></div><div class="line">        return JumpFloor(target - 1) + JumpFloor(target - 2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int JumpFloor(int target) &#123;</div><div class="line">        if(target == 1)</div><div class="line">            return 1;</div><div class="line"></div><div class="line">        if(target == 2)</div><div class="line">            return 2;</div><div class="line"></div><div class="line">        int n1 = 1;</div><div class="line">        int n2 = 2;</div><div class="line">        int total = 0;</div><div class="line"></div><div class="line">        for(int i = 3; i &lt;= target; i++)&#123;</div><div class="line">            total = n1 + n2;</div><div class="line">            n1 = n2;</div><div class="line">            n2 = total;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return total;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重建二叉树]]></title>
      <url>/2017/09/04/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for binary tree</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    public TreeNode reConstructBinaryTree(int [] pre,int [] in) &#123;</div><div class="line">        TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1);</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TreeNode reConstructBinaryTree(int [] pre, int preStart, int preEnd, int [] in, int inStart, int inEnd)&#123;</div><div class="line">        if(preStart &gt; preEnd || inStart &gt; inEnd) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TreeNode root = new TreeNode(pre[preStart]);</div><div class="line"></div><div class="line">        for(int i = inStart; i &lt;= inEnd; i++) &#123;</div><div class="line">            if(pre[preStart] == in[i]) &#123;</div><div class="line">                root.left = reConstructBinaryTree(pre, preStart + 1, preStart + i - inStart, in, inStart, i - 1);</div><div class="line">                root.right = reConstructBinaryTree(pre, preStart + i - inStart + 1, preEnd, in, i + 1, inEnd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从尾到头打印链表]]></title>
      <url>/2017/09/04/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>输入一个链表，从尾到头打印链表每个节点的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*    public class ListNode &#123;</div><div class="line">*        int val;</div><div class="line">*        ListNode next = null;</div><div class="line">*</div><div class="line">*        ListNode(int val) &#123;</div><div class="line">*            this.val = val;</div><div class="line">*        &#125;</div><div class="line">*    &#125;</div><div class="line">*</div><div class="line">*/</div><div class="line">import java.util.ArrayList;</div><div class="line">public class Solution &#123;</div><div class="line">    public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123;</div><div class="line">        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        ListNode next = null;</div><div class="line">        ListNode pre = null;</div><div class="line"></div><div class="line">        while(listNode != null)&#123;</div><div class="line">            next = listNode.next;</div><div class="line">            listNode.next = pre;</div><div class="line">            pre = listNode;</div><div class="line">            listNode = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        while(pre != null)&#123;</div><div class="line">            list.add(pre.val);</div><div class="line">            pre = pre.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二维数组中的查找]]></title>
      <url>/2017/09/04/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public boolean Find(int target, int [][] array) &#123;</div><div class="line">    if(array == null || array.length &lt; 1 || array[0].length &lt; 1)</div><div class="line">        return false;</div><div class="line"></div><div class="line">    int rows = array.length;</div><div class="line">    int cols = array[0].length;</div><div class="line"></div><div class="line">    int row = 0;</div><div class="line">    int col = cols - 1;</div><div class="line"></div><div class="line">    while(row &gt; -1 &amp;&amp; row &lt; rows &amp;&amp; col &gt; -1 &amp;&amp; col &lt; cols)&#123;</div><div class="line">        if(array[row][col] == target)&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else if(array[row][col] &gt; target)&#123;</div><div class="line">            col--;</div><div class="line">        &#125;else if(array[row][col] &lt; target)&#123;</div><div class="line">            row++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Storm集群搭建小结]]></title>
      <url>/2017/07/13/Storm%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>五台Ubuntu 16.04；</li>
<li>关闭防火墙，配置hosts文件；</li>
<li>安装java并配置环境变量；</li>
<li>下载zookeeper-3.4.10.tar.gz、apache-storm-0.9.1.tar.gz;</li>
</ul>
<h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>解压zookeeper-3.4.10.tar.gz到/home/hadoop/目录</p>
<h4 id="建立zookeeper的data目录"><a href="#建立zookeeper的data目录" class="headerlink" title="建立zookeeper的data目录"></a>建立zookeeper的data目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/hadoop/zookeeper-3.4..10/data</div></pre></td></tr></table></figure>
<h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>home/hadoop/zookeeper-3.4.10/conf/zoo.cfg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">tickTime=2000</div><div class="line">dataDir=/home/hadoop/zookeeper-3.4.10/data/</div><div class="line">clientPort=2181</div><div class="line">initLimit=5</div><div class="line">syncLimit=2</div><div class="line">server.1=master:2888:3888</div><div class="line">server.2=node1:2888:3888</div><div class="line">server.3=node2:2888:3888</div><div class="line">server.4=node3:2888:3888</div><div class="line">server.5=node4:2888:3888</div></pre></td></tr></table></figure></p>
<h4 id="建立zookeeper集群的myid文件"><a href="#建立zookeeper集群的myid文件" class="headerlink" title="建立zookeeper集群的myid文件"></a>建立zookeeper集群的myid文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo  “1” &gt; home/hadoop/zookeeper-3.4.10/data/myid</div></pre></td></tr></table></figure>
<h3 id="安装Storm"><a href="#安装Storm" class="headerlink" title="安装Storm"></a>安装Storm</h3><p>解压apache-storm-0.9.1.tar.gz到/home/hadoop目录下</p>
<h4 id="创建本地数据目录"><a href="#创建本地数据目录" class="headerlink" title="创建本地数据目录"></a>创建本地数据目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/hadoop/apache-storm-0.9.1/data</div></pre></td></tr></table></figure>
<h4 id="配置conf-storm-yaml文件："><a href="#配置conf-storm-yaml文件：" class="headerlink" title="配置conf/storm.yaml文件："></a>配置conf/storm.yaml文件：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">storm.zookeeper.servers:</div><div class="line">    - &apos;master&apos;</div><div class="line">    - &apos;node1&apos;</div><div class="line">    - &apos;node2&apos;</div><div class="line">    - &apos;node3&apos;</div><div class="line">    - &apos;node4&apos;</div><div class="line">  nimbus.host: &apos;master&apos;</div><div class="line">  supervisor.slots.ports:</div><div class="line">    - 6700</div><div class="line">    - 6701</div><div class="line">    - 6702</div><div class="line">    - 6703</div><div class="line">  storm.local.dir: &apos;/home/hadoop/apache-storm-0.9.1-incubating/data&apos;</div></pre></td></tr></table></figure>
<h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><h4 id="启动zookeeper："><a href="#启动zookeeper：" class="headerlink" title="启动zookeeper："></a>启动zookeeper：</h4><p>在zookeeper根目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/zkServer.sh start</div></pre></td></tr></table></figure></p>
<p>查看启动状态:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/zkServer.sh status</div></pre></td></tr></table></figure></p>
<p>若启动成功，则一台为leader，另外四台为follower。</p>
<h4 id="启动nimbus："><a href="#启动nimbus：" class="headerlink" title="启动nimbus："></a>启动nimbus：</h4><p>在nimbus主机的strom根目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 启动主节点</div><div class="line">nohup bin/storm nimbus &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line"># 启动web-ui</div><div class="line">nohup bin/storm ui &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line"># 启动logviewer功能</div><div class="line">nohup bin/storm logviewer &gt; /dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<h4 id="启动supervisor："><a href="#启动supervisor：" class="headerlink" title="启动supervisor："></a>启动supervisor：</h4><p>在supervisor的storm根目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nohup bin/storm supervisor &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line">nohup bin/storm logviewer &gt; /dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p>打开浏览器，输入<code>master：8080</code>，即可看到集群信息。</p>
<h3 id="部署程序"><a href="#部署程序" class="headerlink" title="部署程序"></a>部署程序</h3><p>使用maven + IDEA 开发wordcount程序</p>
<h4 id="添加maven依赖："><a href="#添加maven依赖：" class="headerlink" title="添加maven依赖："></a>添加maven依赖：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">    &lt;groupId&gt;storm&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;StormWordCount&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.apache.storm&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;storm-core&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;0.9.3&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;5.1.17&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<h4 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h4><h4 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h4><p>进入项目根目录执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn clean install -DskipTests=true</div><div class="line">mvn package</div></pre></td></tr></table></figure></p>
<p>两条命令成功执行，将会生成jar包。</p>
<p>进入storm根目录，执行以下命令提交任务到集群：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/storm jar &#123;WordCount&#125;/target/*.jar TopologyMain</div></pre></td></tr></table></figure></p>
<h4 id="通过Storm-UI即可查看任务提交和运行情况"><a href="#通过Storm-UI即可查看任务提交和运行情况" class="headerlink" title="通过Storm UI即可查看任务提交和运行情况"></a>通过Storm UI即可查看任务提交和运行情况</h4><p><img src="/uploads/storm-cluster-summary.png" alt="Alt text"><br><img src="/uploads/storm-topology.png" alt="Alt text"></p>
<h4 id="关闭topology："><a href="#关闭topology：" class="headerlink" title="关闭topology："></a>关闭topology：</h4><p>在Storm UI中点击相应任务，在新页面中点击kill即可。</p>
]]></content>
      
        <categories>
            
            <category> Big Data </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Storm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop-2.8.0实践——搭建Hadoop集群]]></title>
      <url>/2017/07/05/Hadoop-2.8.0%E5%AE%9E%E8%B7%B5(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<p>在本地测试hadoop成功后，我们在多台主机上搭建hadoop集群，用于处理大规模数据…</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><ul>
<li>三台 Ubuntu 16.04 64位笔记本（一台作为Master节点，另外两台作为Slave节点）</li>
</ul>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>创建用户，并为其添加root权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo adduser hadoop</div><div class="line">sudo vim /etc/sudoers</div><div class="line"># 修改内容如下：</div><div class="line">root 	ALL=(ALL:ALL) ALL</div><div class="line">hadoop 	ALL=(ALL:ALL) ALL</div></pre></td></tr></table></figure></p>
<p>给hadoop用户创建目录，并添加到sudo用户组中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo chown hadoop /home/hadoop</div><div class="line"># 添加到sudo用户组</div><div class="line">sudo adduser hadoop sudo</div></pre></td></tr></table></figure></p>
<p>最后注销当前用户，使用新创建的hadoop用户登陆。</p>
<h4 id="设置Master与Slave的SSH无密登陆"><a href="#设置Master与Slave的SSH无密登陆" class="headerlink" title="设置Master与Slave的SSH无密登陆"></a>设置Master与Slave的SSH无密登陆</h4><h5 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h5><p>首先要确保你的linux系统中已经安装了ssh，对于ubuntu系统一般默认只安装了ssh client，所以还需要我们手动安装ssh server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure></p>
<h5 id="SSH基本原理"><a href="#SSH基本原理" class="headerlink" title="SSH基本原理"></a>SSH基本原理</h5><p>SSH采用公钥加密来保证安全。过程如下：<br>1.远程主机收到用户的登录请求，把自己的公钥发给用户；<br>2.用户使用这个公钥，将登录密码加密后，发送回来；<br>3.远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>
<h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p>SSH默认端口号为:22，可以根据自己的需要修改默认端口号。SSH远程登陆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 使用默认的22端口</div><div class="line">ssh 192.168.0.1</div><div class="line"># 若修改过SSH默认端口号（例如：修改为了10000），则登陆时需要指定端口号10000</div><div class="line">ssh 192.168.0.1 -p 10000</div></pre></td></tr></table></figure></p>
<h5 id="配置SSH无密登陆"><a href="#配置SSH无密登陆" class="headerlink" title="配置SSH无密登陆"></a>配置SSH无密登陆</h5><p>Hadoop运行过程中需要管理远端Hadoop守护进程，在Hadoop启动以后，NameNode是通过SSH（Secure Shell）来启动和停止各个DataNode上的各种守护进程的。这就必须在节点之间执行指令的时候是不需要输入密码的形式，故我们需要配置SSH运用无密码公钥认证的形式，这样NameNode使用SSH无密码登录并启动DataName进程，同样原理，DataNode上也能使用SSH无密码登录到 NameNode。</p>
<ul>
<li>首先，运行<code>ssh localhost</code>来产生<code>/home/用户名/.ssh</code>目录，然后将生成的 “ id_rsa.pub ” 追加到授权的key里面去。这样的效果是实现了当前用户无密SSH登陆到自己：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh　　# 如果找不到这个文件夹，先执行一下 &quot;ssh localhost&quot;</div><div class="line">ssh-keygen -t rsa</div><div class="line"># 将id_rsa.pub追加到authorized_keys(切记是追加，不是覆盖)</div><div class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<ul>
<li>如果要实现无密登陆到其它的主机，只需将生成的 “ id_rsa.pub “ 追加到其它主机的 ” ~/.ssh/authorized_keys “ 中去。这里我们使用的方法是先将本机的 ” ~/.ssh/id_rsa.pub “ 拷贝到你想无密登陆的主机上，再在相应的主机上将” ~/.ssh/id_rsa.pub “ 追加到该主机的 ” ~/.ssh/authorized_keys “ 中。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 假设我们的主机名为：A，用户名：hadoop，ip：192.168.0.1</div><div class="line"># 想要无密SSH登陆的主机名为：B， 用户名：hadoop，ip：192.168.0.2</div><div class="line"></div><div class="line"># 首先，我们使用A中的hadoop用户拷贝 &quot; ~/.ssh/id_rsa.pub &quot; 到B的 &quot; /home/hadoop/ &quot; 目录下</div><div class="line">scp ~/.ssh/id_rsa.pub hadoop@192.168.0.2:/home/hadoop/</div><div class="line"># 这里的ip也可以换为主机名</div><div class="line"></div><div class="line"># 然后，ssh登陆B，将 &quot; /home/hadoop/id_rsa.pub &quot; 追加到 &quot; ~/.ssh/authorized_keys &quot; 中去。</div><div class="line">cat /home/hadoop/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>现在，我们就可以在A中使用SSH无密登陆到B的hadoop用户了，同理如果想无密登陆其它的主机都可以使用此方法。需要注意的是配置hadoop集群时需要Master和Slave可以互相SSH无密登陆。</p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>我使用了三台主机搭建集群，选定master后，在该主机的/etc/hostname中，修改机器名为master，将其他主机命名为slave1、slave2等。</p>
<p>接着将”主机名与IP地址对应信息”写入/etc/hosts文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 localhost</div><div class="line"># 填入以下信息：</div><div class="line">192.168.199.133 master</div><div class="line">192.168.199.204 slave1</div><div class="line">192.168.199.194 slave2</div></pre></td></tr></table></figure>
<p>注：各台主机（包括Master和Slave）都要进行相应的配置。</p>
<p>配置好之后，在各个主机上执行ping master和ping slave1测试，验证是否相互ping得通。</p>
<p><img src="/uploads/ping_master.png" alt="Alt text"><br>（说明:这里我将slave主机命名为node1、node2，只要前后对应即可。）</p>
<h3 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h3><p>下载地址：<a href="http://mirror.bit.edu.cn/apache/hadoop/common/" target="_blank" rel="external">http://mirror.bit.edu.cn/apache/hadoop/common/</a></p>
<ul>
<li>选择下载 hadoop-2.8.0.tar.gz</li>
<li>将下载的压缩文件解压至/home/hadoop/目录</li>
</ul>
<h3 id="配置集群-分布式环境"><a href="#配置集群-分布式环境" class="headerlink" title="配置集群/分布式环境"></a>配置集群/分布式环境</h3><p>集群/分布式模式需要修改/home/hadoop/hadoop-2.8.0/etc/hadoop/下的5个配置文件。</p>
<h4 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h4><p>将原有的localhost删掉，写入所有slave的主机名，每行一个。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slave1</div><div class="line">slave2</div></pre></td></tr></table></figure></p>
<h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><p>修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">        &lt;value&gt;hdfs://master:9000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/home/hadoop/hadoop/tmp&lt;/value&gt;</div><div class="line">        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/home/hadoop/hadoop/tmp/dfs/name&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</div><div class="line">        &lt;value&gt;master:50090&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/home/hadoop/hadoop/tmp/dfs/data&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">        &lt;value&gt;2&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><p>这个文件不存在，首先需要从模板中复制一份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp mapred-site.xml.template mapred-site.xml</div></pre></td></tr></table></figure></p>
<p>然后配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">        &lt;value&gt;yarn&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</div><div class="line">        &lt;value&gt;master&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h4 id="配置完成后，将master上的hadoop文件复制到其他节点上"><a href="#配置完成后，将master上的hadoop文件复制到其他节点上" class="headerlink" title="配置完成后，将master上的hadoop文件复制到其他节点上"></a>配置完成后，将master上的hadoop文件复制到其他节点上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 先压缩</div><div class="line">sudo tar -zcf ~/hadoop-2.8.0.tar.gz ~/hadoop-2.8.0</div><div class="line"># 再复制</div><div class="line">scp ~/hadoop-2.8.0.tar.gz hadoop@slave1:/home/hadoop</div><div class="line"># slave端解压</div><div class="line">sudo tar -zxf ~/hadoop-2.8.0.tar.gz ~/</div><div class="line"># 修改hadoop-2.8.0及其子目录下所有文件的权限</div><div class="line">sudo chown -R hadoop:hadoop ~/hadoop-2.8.0</div></pre></td></tr></table></figure>
<h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><h4 id="删除临时文件"><a href="#删除临时文件" class="headerlink" title="删除临时文件"></a>删除临时文件</h4><p>如果之前跑过伪分布模式，在切换到集群模式之前应该先删除临时文件（不然会产生冲突）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf ~/hadoop/tmp</div></pre></td></tr></table></figure></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>在master主机上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/hadoop-2.8.0/</div><div class="line">bin/hdfs namenode -format</div><div class="line">sbin/start-dfs.sh</div><div class="line">sbin/start-yarn.sh</div></pre></td></tr></table></figure></p>
<p>有时会发现slave节点的DataNode启动失败，则可以按如下顺序执行命令：<br>(原因：namenode启动有一定时间延迟)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/hdfs namenode -format</div><div class="line">sbin/hadoop-daemon.sh start namenode</div><div class="line">sbin/hadoop-daemon.sh start datanode</div><div class="line">sbin/start-yarn.sh</div></pre></td></tr></table></figure></p>
<h4 id="查看各个节点启动的进程"><a href="#查看各个节点启动的进程" class="headerlink" title="查看各个节点启动的进程"></a>查看各个节点启动的进程</h4><ul>
<li>通过jps命令可以查看各个节点启动的进程</li>
</ul>
<p>master节点:<br><img src="/uploads/jps_master.png" alt="Alt text"><br>slave1节点:<br><img src="/uploads/jps_slave1.png" alt="Alt text"></p>
<ul>
<li>在master节点通过命令<code>bin/hdfs dfsadmin -report</code>可以查看DataNode是否正常启动。</li>
</ul>
<p><img src="/uploads/report_master.png" alt="Alt text"></p>
<ul>
<li>也可以通过Web页面查看集群的信息 <a href="http://master:50070/" target="_blank" rel="external">http://master:50070/</a></li>
</ul>
<p><img src="/uploads/web_cluster.png" alt="Alt text"></p>
<h4 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h4><p>在master节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sbin/stop-dfs.sh</div><div class="line">sbin/stop-yarn.sh</div><div class="line"># 或者</div><div class="line">sbin/stop-all.sh</div></pre></td></tr></table></figure></p>
<h3 id="示例：运行-WordCount"><a href="#示例：运行-WordCount" class="headerlink" title="示例：运行 WordCount"></a>示例：运行 WordCount</h3><h4 id="上传文件到-HDFS"><a href="#上传文件到-HDFS" class="headerlink" title="上传文件到 HDFS"></a>上传文件到 HDFS</h4><p>在本地新建一个文件 words.txt，写入将要分析的内容，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">When You Are Old</div><div class="line">When you are old and grey and full of sleep</div><div class="line">And nodding by the fire take down this book</div><div class="line">And slowly read and dream of the soft look</div><div class="line">Your eyes had once and of their shadows deep</div><div class="line">How many loved your moments of glad grace</div><div class="line">And loved your beauty with love false or true</div><div class="line">But one man loved the pilgrim soul in you</div><div class="line">And loved the sorrows of your changing face</div><div class="line">And bending down beside the glowing bars</div><div class="line">Murmur a little sadly how Love fled</div><div class="line">And paced upon the mountains overhead</div><div class="line">And hid his face amid a crowd of stars</div></pre></td></tr></table></figure>
<p>然后在分布式文件系统中新建一个文件夹/wordcount/input/，用于上传测试文件words.txt:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 在 hdfs 新建文件夹</div><div class="line">bin/hdfs dfs -mkdir /wordcount</div><div class="line">bin/hdfs dfs -mkdir /wordcount/input</div><div class="line"></div><div class="line"># 上传文件</div><div class="line">bin/hdfs dfs -put words.txt /wordcount/input/</div><div class="line"></div><div class="line"># 查看</div><div class="line">bin/hdfs dfs -ls /wordcount/input</div></pre></td></tr></table></figure>
<h4 id="编写-WordCount-程序"><a href="#编写-WordCount-程序" class="headerlink" title="编写 WordCount 程序"></a>编写 WordCount 程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import java.util.StringTokenizer;</div><div class="line"></div><div class="line">import org.apache.hadoop.conf.Configuration;</div><div class="line">import org.apache.hadoop.fs.Path;</div><div class="line">import org.apache.hadoop.io.IntWritable;</div><div class="line">import org.apache.hadoop.io.Text;</div><div class="line">import org.apache.hadoop.mapreduce.Job;</div><div class="line">import org.apache.hadoop.mapreduce.Mapper;</div><div class="line">import org.apache.hadoop.mapreduce.Reducer;</div><div class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"></div><div class="line">public class MyWordCount &#123;</div><div class="line">    public static class MyTokenizerMapper</div><div class="line">        extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123;</div><div class="line">        private final static IntWritable one = new IntWritable(1);</div><div class="line">        private Text word = new Text();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 将句子分解成单词，并将&lt;word, 1&gt;写入context</div><div class="line">         * @param key</div><div class="line">         * @param value</div><div class="line">         * @param context</div><div class="line">         * @throws IOException</div><div class="line">         * @throws InterruptedException</div><div class="line">         */</div><div class="line">        public void map(Object key, Text value, Context context)</div><div class="line">                throws IOException, InterruptedException&#123;</div><div class="line">            StringTokenizer itr = new StringTokenizer(value.toString());</div><div class="line">            while(itr.hasMoreTokens())&#123;</div><div class="line">                word.set(itr.nextToken());</div><div class="line">                context.write(word, one);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class MyIntSumReducer</div><div class="line">        extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt;&#123;</div><div class="line">        private IntWritable result = new IntWritable();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 累计求和，结果写入context</div><div class="line">         * @param key</div><div class="line">         * @param values 一个 key 对应一组 value</div><div class="line">         * @param context</div><div class="line">         * @throws IOException</div><div class="line">         * @throws InterruptedException</div><div class="line">         */</div><div class="line">        public void reduce(Text key, Iterable&lt;IntWritable&gt; values,</div><div class="line">                           Context context)</div><div class="line">            throws IOException, InterruptedException&#123;</div><div class="line">            int sum = 0;</div><div class="line">            for(IntWritable val : values)&#123;</div><div class="line">                sum += val.get();</div><div class="line">            &#125;</div><div class="line">            result.set(sum);</div><div class="line">            context.write(key, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception&#123;</div><div class="line">        Configuration conf = new Configuration();                   // 加载配置信息</div><div class="line">        Job job = Job.getInstance(conf, &quot;my word count&quot;);           // 新建job</div><div class="line">        job.setJarByClass(MyWordCount.class);                       // 设置Jar</div><div class="line">        job.setMapperClass(MyTokenizerMapper.class);                // 设置Mapper</div><div class="line">        job.setCombinerClass(MyIntSumReducer.class);                // 设置Combiner</div><div class="line">        job.setReducerClass(MyIntSumReducer.class);                 // 设置Reducer</div><div class="line">        job.setOutputKeyClass(Text.class);                          // 设置输出的key</div><div class="line">        job.setOutputValueClass(IntWritable.class);                 // 设置输出的value</div><div class="line">        FileInputFormat.addInputPath(job, new Path(args[0]));       // 设置输入路径</div><div class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));     // 设置输出路径</div><div class="line">        System.exit(job.waitForCompletion(true) ? 0 : 1);           // 执行job</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打包并提交任务"><a href="#打包并提交任务" class="headerlink" title="打包并提交任务"></a>打包并提交任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 环境变量配置:（/etc/profile 或 ~/.bashrc）</div><div class="line">export JAVA_HOME=/usr/java/default</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;PATH&#125;</div><div class="line">export HADOOP_CLASSPATH=$&#123;JAVA_HOME&#125;/lib/tools.jar</div><div class="line"></div><div class="line"># 编译并打包成jar:</div><div class="line">bin/hadoop com.sun.tools.javac.Main WordCount.java</div><div class="line">jar cf wc.jar WordCount*.class</div><div class="line"></div><div class="line"># 提交任务（在hadoop根目录下执行）</div><div class="line">bin/hadoop jar wc.jar WordCount /wordcount/input /wordcount/output</div><div class="line"></div><div class="line"># 查看运行结果：</div><div class="line">bin/hadoop fs -cat /wordcount/output/part-r-00000</div></pre></td></tr></table></figure>
<blockquote>
<p>推荐：<br>Apache Hadoop: <a href="http://hadoop.apache.org/" target="_blank" rel="external">http://hadoop.apache.org/</a><br>Hadoop Commands Guide: <a href="http://hadoop.apache.org/docs/r2.8.0/hadoop-project-dist/hadoop-common/CommandsManual.html" target="_blank" rel="external">http://hadoop.apache.org/docs/r2.8.0/hadoop-project-dist/hadoop-common/CommandsManual.html</a><br>Apache Hadoop Main 3.0.0-alpha3 API: <a href="http://hadoop.apache.org/docs/current/api/" target="_blank" rel="external">http://hadoop.apache.org/docs/current/api/</a><br>我的另一篇博文： <a href="https://jochen-m.github.io/2017/05/19/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5/">《Hadoop大数据平台架构与实践》</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Big Data </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop-2.8.0实践——单机模式和伪分布模式]]></title>
      <url>/2017/06/28/Hadoop-2.8.0%E5%AE%9E%E8%B7%B5(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li>系统： Linux最佳，Windows亦可（本教程基于Linux Ubuntu 16.04 LTS）</li>
<li>软件：<ul>
<li>Java 1.7及以上</li>
<li>ssh 和 sshd</li>
</ul>
</li>
<li>安装ssh:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install ssh</div><div class="line">$ sudo apt-get install rsync</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="下载-Hadoop-2-8-0"><a href="#下载-Hadoop-2-8-0" class="headerlink" title="下载 Hadoop 2.8.0"></a>下载 Hadoop 2.8.0</h4><p>下载地址：<a href="http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.0/" target="_blank" rel="external">http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.0/</a><br>选择下载 hadoop-2.8.0.tar.gz，并解压。</p>
<h4 id="为-Hadoop-配置-Java-路径"><a href="#为-Hadoop-配置-Java-路径" class="headerlink" title="为 Hadoop 配置 Java 路径"></a>为 Hadoop 配置 Java 路径</h4><p>编辑 etc/hadoop/hadoop-env.sh：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/path/to/java/root/dir</div></pre></td></tr></table></figure></p>
<h4 id="启动-Hadoop"><a href="#启动-Hadoop" class="headerlink" title="启动 Hadoop"></a>启动 Hadoop</h4><p>运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/hadoop</div></pre></td></tr></table></figure></p>
<p>若打印出帮助信息，则表示安装成功。</p>
<h3 id="标准模式（单机模式）操作"><a href="#标准模式（单机模式）操作" class="headerlink" title="标准模式（单机模式）操作"></a>标准模式（单机模式）操作</h3><p>默认情况下，Hadoop被配置为以非分布式模式运行，作为一个单一的Java进程。这对于调试非常有用。<br>下面的示例复制未打包的conf目录作为输入，然后找到并显示给定正则表达式的每一个匹配项。输出被写入到给定的输出目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir input</div><div class="line">$ cp etc/hadoop/*.xml input</div><div class="line">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.0.jar grep input output &apos;dfs[a-z.]+&apos;</div><div class="line">$ cat output/*</div></pre></td></tr></table></figure></p>
<h3 id="伪分布模式操作"><a href="#伪分布模式操作" class="headerlink" title="伪分布模式操作"></a>伪分布模式操作</h3><p>Hadoop还可以在一个伪分布模式下运行，每个Hadoop守护进程在一个单独的Java进程中运行。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>etc/hadoop/core-site.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>etc/hadoop/hdfs-site.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">        &lt;value&gt;1&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="ssh免密码连接本地主机"><a href="#ssh免密码连接本地主机" class="headerlink" title="ssh免密码连接本地主机"></a>ssh免密码连接本地主机</h4><p>检查是否可以使用ssh到本地主机，而无需使用密码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh localhost</div></pre></td></tr></table></figure></p>
<p>如果不能在没有密码的情况下ssh到localhost，请执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa</div><div class="line">$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class="line">$ chmod 0600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><h5 id="格式文件系统"><a href="#格式文件系统" class="headerlink" title="格式文件系统:"></a>格式文件系统:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/hdfs namenode -format</div></pre></td></tr></table></figure>
<h5 id="启动NameNode守护进程和DataNode守护进程"><a href="#启动NameNode守护进程和DataNode守护进程" class="headerlink" title="启动NameNode守护进程和DataNode守护进程:"></a>启动NameNode守护进程和DataNode守护进程:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sbin/start-dfs.sh</div></pre></td></tr></table></figure>
<h5 id="浏览NameNode的web界面-默认情况下"><a href="#浏览NameNode的web界面-默认情况下" class="headerlink" title="浏览NameNode的web界面;默认情况下:"></a>浏览NameNode的web界面;默认情况下:</h5><p><a href="http://localhost:50070/" target="_blank" rel="external">http://localhost:50070/</a></p>
<h5 id="创建执行MapReduce作业所需的HDFS目录"><a href="#创建执行MapReduce作业所需的HDFS目录" class="headerlink" title="创建执行MapReduce作业所需的HDFS目录:"></a>创建执行MapReduce作业所需的HDFS目录:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/hdfs dfs -mkdir /user</div><div class="line">$ bin/hdfs dfs -mkdir /user/&lt;username&gt;</div></pre></td></tr></table></figure>
<h5 id="将输入文件复制到分布式文件系统中"><a href="#将输入文件复制到分布式文件系统中" class="headerlink" title="将输入文件复制到分布式文件系统中:"></a>将输入文件复制到分布式文件系统中:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/hdfs dfs -put etc/hadoop input</div></pre></td></tr></table></figure>
<h5 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例:"></a>运行示例:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.0.jar grep input output &apos;dfs[a-z.]+&apos;</div></pre></td></tr></table></figure>
<h5 id="检查输出文件"><a href="#检查输出文件" class="headerlink" title="检查输出文件"></a>检查输出文件</h5><p>将输出文件从分布式文件系统复制到本地文件系统，并检查它们:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/hdfs dfs -get output output</div><div class="line">$ cat output/*</div></pre></td></tr></table></figure></p>
<p>或者 查看分布式文件系统上的输出文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/hdfs dfs -cat output/*</div></pre></td></tr></table></figure></p>
<h5 id="当完成这些，可以停止守护进程："><a href="#当完成这些，可以停止守护进程：" class="headerlink" title="当完成这些，可以停止守护进程："></a>当完成这些，可以停止守护进程：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sbin/stop-dfs.sh</div></pre></td></tr></table></figure>
<h4 id="单节点YARN"><a href="#单节点YARN" class="headerlink" title="单节点YARN"></a>单节点YARN</h4><p>可以通过设置一些参数和运行ResourceManager守护进程及NodeManager守护进程，在伪分布模式下运行MapReduce作业。<br>（以下操作假设以上说明的前四步均已执行！）</p>
<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><p>etc/hadoop/mapred-site.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">        &lt;value&gt;yarn&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>etc/hadoop/yarn-site.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h5 id="启动ResourceManager守护进程和NodeManager守护进程"><a href="#启动ResourceManager守护进程和NodeManager守护进程" class="headerlink" title="启动ResourceManager守护进程和NodeManager守护进程"></a>启动ResourceManager守护进程和NodeManager守护进程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sbin/start-yarn.sh</div></pre></td></tr></table></figure>
<h5 id="浏览ResourceManager-web界面-默认情况下："><a href="#浏览ResourceManager-web界面-默认情况下：" class="headerlink" title="浏览ResourceManager web界面;默认情况下："></a>浏览ResourceManager web界面;默认情况下：</h5><p><a href="http://localhost:8088/" target="_blank" rel="external">http://localhost:8088/</a></p>
<h5 id="完成后，停止守护进程："><a href="#完成后，停止守护进程：" class="headerlink" title="完成后，停止守护进程："></a>完成后，停止守护进程：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sbin/stop-yarn.sh</div></pre></td></tr></table></figure>
<blockquote>
<p>推荐：<br>Apache Hadoop: <a href="http://hadoop.apache.org/" target="_blank" rel="external">http://hadoop.apache.org/</a><br>Hadoop Commands Guide: <a href="http://hadoop.apache.org/docs/r2.8.0/hadoop-project-dist/hadoop-common/CommandsManual.html" target="_blank" rel="external">http://hadoop.apache.org/docs/r2.8.0/hadoop-project-dist/hadoop-common/CommandsManual.html</a><br>Apache Hadoop Main 3.0.0-alpha3 API: <a href="http://hadoop.apache.org/docs/current/api/" target="_blank" rel="external">http://hadoop.apache.org/docs/current/api/</a><br>我的另一篇博文： <a href="https://jochen-m.github.io/2017/05/19/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5/">《Hadoop大数据平台架构与实践》</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Big Data </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs-Express-MongoDB快速搭建网站(进阶)]]></title>
      <url>/2017/06/15/Nodejs-Express-MongoDB%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99-%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<h3 id="开发用户的注册登录功能"><a href="#开发用户的注册登录功能" class="headerlink" title="开发用户的注册登录功能"></a>开发用户的注册登录功能</h3><h4 id="用户模型及密码处理"><a href="#用户模型及密码处理" class="headerlink" title="用户模型及密码处理"></a>用户模型及密码处理</h4><p>schemas/user.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">let mongoose = require(&apos;mongoose&apos;);</div><div class="line">let bcrypt = require(&quot;bcrypt&quot;);</div><div class="line">const SALT_WORK_FACTOR = 10;</div><div class="line"></div><div class="line">let UserSchema = new mongoose.Schema(&#123;</div><div class="line">  name: &#123;</div><div class="line">    unique: true,</div><div class="line">    type: String</div><div class="line">  &#125;,</div><div class="line">  password: String,</div><div class="line">  meta: &#123;</div><div class="line">    createAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;,</div><div class="line">    updateAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">UserSchema.pre(&apos;save&apos;, function(next)&#123;</div><div class="line">  let user = this;</div><div class="line">  if(this.isNew)&#123;</div><div class="line">    this.meta.createAt = this.meta.updateAt = Date.now();</div><div class="line">  &#125;else&#123;</div><div class="line">    this.meta.updateAt = Date.now();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 将密码与盐混合后加密处理</div><div class="line">  bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt)&#123;</div><div class="line">    if(err) return next(err);</div><div class="line"></div><div class="line">    bcrypt.hash(user.password, salt, function(err, hash)&#123;</div><div class="line">      if(err) return next(err);</div><div class="line"></div><div class="line">      user.password = hash;</div><div class="line">      next();</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">UserSchema.methods = &#123;</div><div class="line">  /**</div><div class="line">   * 验证密码是否正确</div><div class="line">   */</div><div class="line">  verifyPassword: function(_password, cb)&#123;</div><div class="line">    bcrypt.compare(_password, this.password, function(err, isMatch)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        return cb(err);</div><div class="line">      &#125;</div><div class="line">      cb(null, isMatch);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">UserSchema.statics = &#123;</div><div class="line">  fetch: function(callback)&#123;</div><div class="line">    return this</div><div class="line">      .find(&#123;&#125;)</div><div class="line">      .sort(&apos;meta.updateAt&apos;)</div><div class="line">      .exec(callback);</div><div class="line">  &#125;,</div><div class="line">  findById: function(id, callback)&#123;</div><div class="line">    return this</div><div class="line">      .findOne(&#123;_id: id&#125;)</div><div class="line">      .exec(callback);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = UserSchema</div></pre></td></tr></table></figure></p>
<h4 id="登录注册前端视图"><a href="#登录注册前端视图" class="headerlink" title="登录注册前端视图"></a>登录注册前端视图</h4><p>修改head.jade文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">.navbar.navbar-default</div><div class="line">  .container</div><div class="line">    .navbar-header</div><div class="line">      a.navbar-brand(href=&quot;/&quot;) MovieGoGo</div><div class="line">    p.navbar-text.navbar-right</div><div class="line">      a.navbar-link(href=&quot;#&quot;, data-toggle=&quot;modal&quot;, data-target=&quot;#signupModal&quot;) 注册</div><div class="line">      span &amp;nbsp;|&amp;nbsp;</div><div class="line">      a.navbar-link(href=&quot;#&quot;, data-toggle=&quot;modal&quot;, data-target=&quot;#signinModal&quot;) 登录</div><div class="line">#signupModal.modal.fade</div><div class="line">  .modal-dialog</div><div class="line">    .modal-content</div><div class="line">      form(method=&quot;POST&quot;, action=&quot;/user/signup&quot;)</div><div class="line">        .modal-header 注册</div><div class="line">        .modal-body</div><div class="line">          .form-group</div><div class="line">            label(for=&quot;signupName&quot;) 用户名</div><div class="line">            input#signupName.form-control(name=&quot;user[name]&quot;, type=&quot;text&quot;)</div><div class="line">          .form-group</div><div class="line">            label(for=&quot;signupPassword&quot;) 密码</div><div class="line">            input#signupName.form-control(name=&quot;user[password]&quot;, type=&quot;password&quot;)</div><div class="line">        .modal-footer</div><div class="line">          button.btn.btn-danger(type=&quot;button&quot;, data-dismiss=&quot;modal&quot;) 关闭</div><div class="line">          button.btn.btn-success(type=&quot;submit&quot;) 提交</div><div class="line">#signinModal.modal.fade</div><div class="line">  .modal-dialog</div><div class="line">    .modal-content</div><div class="line">      form(method=&quot;POST&quot;, action=&quot;/user/signin&quot;)</div><div class="line">        .modal-header 登录</div><div class="line">        .modal-body</div><div class="line">          .form-group</div><div class="line">            label(for=&quot;signinName&quot;) 用户名</div><div class="line">            input#signinName.form-control(name=&quot;user[name]&quot;, type=&quot;text&quot;)</div><div class="line">          .form-group</div><div class="line">            label(for=&quot;signinPassword&quot;) 密码</div><div class="line">            input#signinName.form-control(name=&quot;user[password]&quot;, type=&quot;password&quot;)</div><div class="line">        .modal-footer</div><div class="line">          button.btn.btn-danger(type=&quot;button&quot;, data-dismiss=&quot;modal&quot;) 关闭</div><div class="line">          button.btn.btn-success(type=&quot;submit&quot;) 登录</div></pre></td></tr></table></figure></p>
<h4 id="注册用户后台存储"><a href="#注册用户后台存储" class="headerlink" title="注册用户后台存储"></a>注册用户后台存储</h4><p>app.js文件中添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">let User = require(&apos;./models/user&apos;);</div><div class="line"></div><div class="line">// signup</div><div class="line">app.post(&apos;/user/signup&apos;, function(req, res)&#123;</div><div class="line">  let _user = req.body.user;</div><div class="line"></div><div class="line">  User.find(&#123;name: _user.name&#125;, function(err, user)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if(user.length &gt; 0)&#123;</div><div class="line">      return res.redirect(&quot;/&quot;);</div><div class="line">    &#125;else&#123;</div><div class="line">      let user = new User(_user);</div><div class="line"></div><div class="line">      user.save(function(err, user)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">          console.log(err);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        res.redirect(&apos;/admin/userlist&apos;);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="实现登录逻辑"><a href="#实现登录逻辑" class="headerlink" title="实现登录逻辑"></a>实现登录逻辑</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// signin</div><div class="line">app.post(&apos;/user/signin&apos;, function(req, res)&#123;</div><div class="line">  let user_form = req.body.user;</div><div class="line">  let name = user_form.name;</div><div class="line">  let password = user_form.password;</div><div class="line"></div><div class="line">  User.findOne(&#123;name: name&#125;, function(err, _user)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if(!_user)&#123;</div><div class="line">      return res.redirect(&apos;/&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    let user = new User(_user);</div><div class="line">    user.verifyPassword(password, function(err, isMatch)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      if(isMatch)&#123;</div><div class="line">        console.log(&quot;Password is matched&quot;);</div><div class="line">        req.session.user = user;</div><div class="line">        return res.redirect(&apos;/&apos;);</div><div class="line">      &#125;else&#123;</div><div class="line">        console.log(&quot;Password is not matched&quot;);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="利用mongodb做会话的持久化"><a href="#利用mongodb做会话的持久化" class="headerlink" title="利用mongodb做会话的持久化"></a>利用mongodb做会话的持久化</h4><p>app.js文件中添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let cookieParser = require(&apos;cookie-parser&apos;);</div><div class="line">let session = require(&apos;express-session&apos;);</div><div class="line">let mongoStore = require(&apos;connect-mongo&apos;)(session);</div><div class="line"></div><div class="line">app.use(cookieParser());</div><div class="line">app.use(session(&#123;</div><div class="line">  secret: &apos;moviegogo&apos;,</div><div class="line">  store: new mongoStore(&#123;</div><div class="line">    url: dbUrl,</div><div class="line">    collection: &apos;sessions&apos;</div><div class="line">  &#125;)</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<h4 id="注销用户、用户退出功能实现"><a href="#注销用户、用户退出功能实现" class="headerlink" title="注销用户、用户退出功能实现"></a>注销用户、用户退出功能实现</h4><p>修改head.jade文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.navbar.navbar-default</div><div class="line">  .container</div><div class="line">    .navbar-header</div><div class="line">      a.navbar-brand(href=&quot;/&quot;) MovieGoGo</div><div class="line">    if user</div><div class="line">      p.navbar-text.navbar-right</div><div class="line">        span 欢迎您,#&#123;user.name&#125;</div><div class="line">        span &amp;nbsp;|&amp;nbsp;</div><div class="line">        a.navbar-link(href=&quot;/logout&quot;) 退出</div><div class="line">    else</div><div class="line">      p.navbar-text.navbar-right</div><div class="line">        a.navbar-link(href=&quot;#&quot;, data-toggle=&quot;modal&quot;, data-target=&quot;#signupModal&quot;) 注册</div><div class="line">        span &amp;nbsp;|&amp;nbsp;</div><div class="line">        a.navbar-link(href=&quot;#&quot;, data-toggle=&quot;modal&quot;, data-target=&quot;#signinModal&quot;) 登录</div></pre></td></tr></table></figure></p>
<p>app.js文件中添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// pre handle user</div><div class="line">app.use(function(req, res, next)&#123;</div><div class="line">    let _user = req.session.user;</div><div class="line"></div><div class="line">    if(_user)&#123;</div><div class="line">        app.locals.user = _user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logout</div><div class="line">app.get(&apos;/logout&apos;, function(req, res)&#123;</div><div class="line">  delete req.session.user;</div><div class="line">  delete app.locals.user;</div><div class="line">  res.redirect(&apos;/&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="配置入口文件app-js"><a href="#配置入口文件app-js" class="headerlink" title="配置入口文件app.js:"></a>配置入口文件app.js:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let logger = require(&apos;morgan&apos;);</div><div class="line"></div><div class="line">// 用于本地测试</div><div class="line">if( &apos;development&apos; === app.get(&apos;env&apos;))&#123;</div><div class="line">    app.set(&apos;showStackError&apos;, true);            // 显示栈错误信息</div><div class="line">    app.use(logger(&apos;:method :url :status&apos;));    // 显示客户端请求信息（请求方式 url 状态）</div><div class="line">    app.locals.pretty = true;                   // 格式化代码</div><div class="line">    mongoose.set(&apos;debug&apos;, true);                // mongoose调试模式</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="调整目录结构，彻底分离MVC层"><a href="#调整目录结构，彻底分离MVC层" class="headerlink" title="调整目录结构，彻底分离MVC层"></a>调整目录结构，彻底分离MVC层</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app/</div><div class="line">│   ├── controllers/</div><div class="line">│   │   ├── index.js</div><div class="line">│   │   ├── movie.js</div><div class="line">│   │   └── user.js</div><div class="line">│   ├── models/</div><div class="line">│   │   ├── movie.js</div><div class="line">│   │   └── user.js</div><div class="line">│   ├── schemas/</div><div class="line">│   │   ├── movie.js</div><div class="line">│   │   └── user.js</div><div class="line">│   └── views/</div><div class="line">│       ├── includes/</div><div class="line">│       │   ├── head.jade</div><div class="line">│       │   └── header.jade</div><div class="line">│       ├── pages/</div><div class="line">│       │   ├── admin.jade</div><div class="line">│       │   ├── detail.jade</div><div class="line">│       │   ├── index.jade</div><div class="line">│       │   ├── list.jade</div><div class="line">│       │   └── userlist.jade</div><div class="line">│       └── layout.jade</div><div class="line">├── config/</div><div class="line">│       └── routes.js</div><div class="line">│── public/</div><div class="line">│   ├── images/</div><div class="line">│   ├── js/</div><div class="line">│   └── libs/</div><div class="line">│       ├── bootstrap/</div><div class="line">│       └── jquery/</div><div class="line">├── .bowerrc</div><div class="line">├── README.md</div><div class="line">├── app.js</div><div class="line">├── bower.json</div><div class="line">└── package.json</div></pre></td></tr></table></figure>
<p>将app.js文件中路由相关代码移到控制器中，并在app.js中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&apos;./config/routes&apos;)(app);</div></pre></td></tr></table></figure></p>
<p>简化后的routes.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">let Index = require(&apos;../app/controllers/index&apos;);</div><div class="line">let User = require(&apos;../app/controllers/user&apos;);</div><div class="line">let Movie = require(&apos;../app/controllers/movie&apos;);</div><div class="line"></div><div class="line">module.exports = function(app) &#123;</div><div class="line">    // pre handle user</div><div class="line">    app.use(function(req, res, next)&#123;</div><div class="line">        let _user = req.session.user;</div><div class="line">        app.locals.user = _user;</div><div class="line">        next();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // Index</div><div class="line">    app.get(&apos;/&apos;, Index.index);</div><div class="line"></div><div class="line">    // User</div><div class="line">    app.post(&apos;/user/signup&apos;, User.signup);</div><div class="line">    app.post(&apos;/user/signin&apos;, User.signin);</div><div class="line">    app.get(&apos;/logout&apos;, User.logout);</div><div class="line">    app.get(&apos;/admin/userlist&apos;, User.list);</div><div class="line"></div><div class="line">    // Movie</div><div class="line">    app.post(&apos;/admin/movie/new&apos;, Movie.save);</div><div class="line">    app.get(&apos;/movie/:id&apos;, Movie.detail);</div><div class="line">    app.get(&apos;/admin/movie&apos;, Movie.new);</div><div class="line">    app.get(&apos;/admin/update/:id&apos;, Movie.update);</div><div class="line">    app.get(&apos;/admin/list&apos;, Movie.list);</div><div class="line">    app.delete(&apos;/admin/delete&apos;, Movie.delete);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>/app/controllers/index.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">let Movie = require(&apos;../models/movie&apos;);</div><div class="line"></div><div class="line">// index page</div><div class="line">exports.index = function(req, res)&#123;</div><div class="line">    // console.log(&quot;user in session: &quot;);</div><div class="line">    // console.log(req.session.user);</div><div class="line"></div><div class="line">    Movie.fetch(function(err, movies)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">            console.log(err);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        res.render(&apos;index&apos;, &#123;</div><div class="line">            title: &apos;MovieGoGo 首页&apos;,</div><div class="line">            movies: movies</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>/app/controllers/movie.js、 /app/controllers/user.js 与 /app/controllers/index.js 类似。</p>
<h4 id="增加注册登录跳转页面"><a href="#增加注册登录跳转页面" class="headerlink" title="增加注册登录跳转页面"></a>增加注册登录跳转页面</h4><p>routes.js中增加两条路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.get(&apos;/signup&apos;, User.showSignup);</div><div class="line">app.get(&apos;/signin&apos;, User.showSignin);</div></pre></td></tr></table></figure></p>
<p>controllers/user.js中增加两个方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">exports.showSignup = function(req, res)&#123;</div><div class="line">    res.render(&apos;signup&apos;, &#123;</div><div class="line">        title: &quot;注册&quot;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.showSignin = function(req, res)&#123;</div><div class="line">    res.render(&apos;signin&apos;, &#123;</div><div class="line">        title: &quot;登录&quot;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>增加signup.jade和signin.jade两个页面（与之前的模态窗口类似）。</p>
<h4 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h4><p>schemas/user.js中增加字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">role: &#123;</div><div class="line">        // 0 - normal user</div><div class="line">        // 1 - verified user</div><div class="line">        // 2 - professional user</div><div class="line">        // ...</div><div class="line">        // &gt;10 - admin</div><div class="line">        // &gt;50 - super admin</div><div class="line">        type: Number,</div><div class="line">        default: 0</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>controllers/user.js中增加两个中间件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// middleware for user</div><div class="line">exports.signinRequired = function(req, res, next)&#123;</div><div class="line">    let user = req.session.user;</div><div class="line">    if(!user)&#123;</div><div class="line">        res.redirect(&apos;/signin&apos;);</div><div class="line">    &#125;</div><div class="line">    next();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.adminRequired = function(req, res, next)&#123;</div><div class="line">    let user = req.session.user;</div><div class="line">    if(user.role &lt;= 10)&#123;</div><div class="line">        res.redirect(&apos;/signin&apos;);</div><div class="line">    &#125;</div><div class="line">    next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>规范路由命名，并修改相关文件的路由信息，如： public/js/admin.js 等。<br>为所有以 admin 开头的路由增加中间件 User.signinRequired 和 User.adminRequired。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Index</div><div class="line">app.get(&apos;/&apos;, Index.index);</div><div class="line"></div><div class="line">// User</div><div class="line">app.post(&apos;/user/signup&apos;, User.signup);</div><div class="line">app.post(&apos;/user/signin&apos;, User.signin);</div><div class="line">app.get(&apos;/signup&apos;, User.showSignup);</div><div class="line">app.get(&apos;/signin&apos;, User.showSignin);</div><div class="line">app.get(&apos;/logout&apos;, User.logout);</div><div class="line">app.get(&apos;/admin/user/list&apos;, User.signinRequired, User.adminRequired, User.list);</div><div class="line"></div><div class="line">// Movie</div><div class="line">app.post(&apos;/admin/movie/save&apos;, User.signinRequired, User.adminRequired, Movie.save);</div><div class="line">app.get(&apos;/movie/:id&apos;, Movie.detail);</div><div class="line">app.get(&apos;/admin/movie/new&apos;, User.signinRequired, User.adminRequired, Movie.new);</div><div class="line">app.get(&apos;/admin/movie/update/:id&apos;, User.signinRequired, User.adminRequired, Movie.update);</div><div class="line">app.get(&apos;/admin/movie/list&apos;, User.signinRequired, User.adminRequired, Movie.list);</div><div class="line">app.delete(&apos;/admin/movie/delete&apos;, User.signinRequired, User.adminRequired, Movie.delete);</div></pre></td></tr></table></figure></p>
<h3 id="开发评论和回复功能"><a href="#开发评论和回复功能" class="headerlink" title="开发评论和回复功能"></a>开发评论和回复功能</h3><p><em>注</em>：只有登陆的用户才能发表评论和回复</p>
<h4 id="设计评论和回复的数据模型"><a href="#设计评论和回复的数据模型" class="headerlink" title="设计评论和回复的数据模型"></a>设计评论和回复的数据模型</h4><p>schemas/comment.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">let mongoose = require(&apos;mongoose&apos;);</div><div class="line">let Schema = mongoose.Schema;</div><div class="line">let ObjectId = Schema.Types.ObjectId;</div><div class="line"></div><div class="line">let CommentSchema = new mongoose.Schema(&#123;</div><div class="line">  movie: &#123;</div><div class="line">    type: ObjectId,</div><div class="line">    ref: &apos;Movie&apos;</div><div class="line">  &#125;,</div><div class="line">  from: &#123;</div><div class="line">    type: ObjectId,</div><div class="line">    ref: &apos;User&apos;</div><div class="line">  &#125;,</div><div class="line">  reply: [&#123;</div><div class="line">    from: &#123;</div><div class="line">      type: ObjectId,</div><div class="line">      ref: &apos;User&apos;</div><div class="line">    &#125;,</div><div class="line">    to: &#123;</div><div class="line">      type: ObjectId,</div><div class="line">      ref: &apos;User&apos;</div><div class="line">    &#125;,</div><div class="line">    content: String</div><div class="line">  &#125;]，</div><div class="line">  content: String,</div><div class="line">  meta: &#123;</div><div class="line">    createAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;,</div><div class="line">    updateAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="评论及回复的存储与展现"><a href="#评论及回复的存储与展现" class="headerlink" title="评论及回复的存储与展现"></a>评论及回复的存储与展现</h4><p>#####　在detail.jade中添加评论区和回复区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">.panel.panel-default</div><div class="line">  .panel-heading</div><div class="line">    h3 评论区</div><div class="line">  .panel-body</div><div class="line">    ul.media-list</div><div class="line">  if comments</div><div class="line">    each item in comments</div><div class="line">      li(style=&quot;list-style-type:none&quot;).media</div><div class="line">        .pull-left</div><div class="line">          a.comment(href=&quot;#comment&quot;, data-cid=&quot;#&#123;item._id&#125;&quot;, data-tid=&quot;#&#123;item.from._id&#125;&quot;)</div><div class="line">            img.media-object(src=&quot;/images/avatar.jpg&quot;, style=&quot;width: 48px; height: 48px;&quot;)</div><div class="line">        .media-body</div><div class="line">          h4.media-heading #&#123;item.from.name&#125;</div><div class="line">          p #&#123;item.content&#125;</div><div class="line">          //- 回复部分</div><div class="line">          if item.reply &amp;&amp; item.reply.length &gt; 0</div><div class="line">            each reply in item.reply</div><div class="line">              .media</div><div class="line">                .pull-left</div><div class="line">                  a.comment(href=&quot;#comment&quot;, data-cid=&quot;#&#123;item._id&#125;&quot;, data-tid=&quot;#&#123;reply.from._id&#125;&quot;)</div><div class="line">                    img.media-object(src=&quot;/images/avatar.jpg&quot;, style=&quot;width: 48px; height: 48px;&quot;)</div><div class="line">                .media-body</div><div class="line">                  h4.media-heading</div><div class="line">                    | #&#123;reply.from.name&#125;</div><div class="line">                    span.text-info &amp;nbsp;回复&amp;nbsp;</div><div class="line">                    | #&#123;reply.to.name&#125;</div><div class="line">                  p #&#123;reply.content&#125;</div><div class="line">            //- 回复部分结束</div><div class="line">  #comment</div><div class="line">    form#commentForm(method=&quot;post&quot;, action=&quot;/user/comment&quot;)</div><div class="line">      input(type=&quot;hidden&quot;, name=&quot;comment[movie]&quot;, value=&quot;#&#123;movie._id&#125;&quot;)</div><div class="line">      if user</div><div class="line">        input(type=&quot;hidden&quot;, name=&quot;comment[from]&quot;, value=&quot;#&#123;user._id&#125;&quot;)</div><div class="line">      .form-group</div><div class="line">        textarea.form-group(name=&quot;comment[content]&quot;, row=&quot;3&quot;)</div><div class="line">      if user</div><div class="line">        button.btn.btn-primary(type=&apos;submit&apos;) 提交</div><div class="line">      else</div><div class="line">        a.navbar-link(href=&quot;#&quot;, data-toggle=&quot;modal&quot;, data-target=&quot;#signinModal&quot;) 登录后评论</div><div class="line">  script(src=&quot;/js/detail.js&quot;)</div></pre></td></tr></table></figure></p>
<p>#####　添加路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.post(&apos;/user/comment&apos;, User.signinRequired, Comment.save);</div></pre></td></tr></table></figure></p>
<p>#####　评论存储，新建models/comment.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">let Comment = require(&apos;../models/comment&apos;);</div><div class="line"></div><div class="line">// Routes for comment</div><div class="line">exports.save = function(req, res)&#123;</div><div class="line">  let _comment = req.body.comment;</div><div class="line">  let movieId = _comment.movie;</div><div class="line"></div><div class="line">  if(_comment.cid)&#123;</div><div class="line">    Comment.findById(_comment.cid, function(err, comment)&#123;</div><div class="line">      let reply = &#123;</div><div class="line">        from: _comment.from,</div><div class="line">        to: _comment.tid,</div><div class="line">        content: _comment.content</div><div class="line">      &#125;;</div><div class="line">      comment.reply.push(reply);</div><div class="line">      comment.save(function(err, comment)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">          console.log(err);</div><div class="line">        &#125;</div><div class="line">        res.redirect(&apos;/movie/&apos; + movieId);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;else&#123;</div><div class="line">    let comment = new Comment(_comment);</div><div class="line">    comment.save(function(err, comment)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line">      res.redirect(&apos;/movie/&apos; + movieId);  // 评论后返回当前电影</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>#####　为头像增加点击事件：<br>public/js/detail.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">  $(&apos;.comment&apos;).click(function(e)&#123;</div><div class="line">    let target = $(this);</div><div class="line">    let toId = target.data(&apos;tid&apos;);</div><div class="line">    let commentId = target.data(&apos;cid&apos;);</div><div class="line"></div><div class="line">    if($(&quot;#toId&quot;).length &gt; 0)&#123;</div><div class="line">      $(&quot;#toId&quot;).val(toId);</div><div class="line">    &#125;else&#123;</div><div class="line">      $(&apos;&lt;input&gt;&apos;).attr(&#123;</div><div class="line">        type: &apos;hidden&apos;,</div><div class="line">        id: &apos;toId&apos;,</div><div class="line">        name: &apos;comment[tid]&apos;,</div><div class="line">        value: toId</div><div class="line">      &#125;).appendTo(&apos;#commentForm&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if($(&quot;#commentId&quot;).length &gt; 0)&#123;</div><div class="line">      $(&quot;#commentId&quot;).val(commentId);</div><div class="line">    &#125;else&#123;</div><div class="line">      $(&apos;&lt;input&gt;&apos;).attr(&#123;</div><div class="line">        type: &apos;hidden&apos;,</div><div class="line">        id: &apos;commentId&apos;,</div><div class="line">        name: &apos;comment[cid]&apos;,</div><div class="line">        value: commentId</div><div class="line">      &#125;).appendTo(&apos;#commentForm&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>#####　展示评论和回复<br>对controllers/movie.js稍作修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">exports.detail = function(req, res)&#123;</div><div class="line">  let id = req.params.id;</div><div class="line">  Movie.findById(id, function(err, movie)&#123;</div><div class="line">    Comment</div><div class="line">    .find(&#123;movie: id&#125;)</div><div class="line">    .populate(&apos;from&apos;, &apos;name&apos;)       // 连表查询from的name字段，即评论人的名字</div><div class="line">    .populate(&apos;reply.from reply.to&apos;, &apos;name&apos;)  // 连表查询reply.from和reply.to的name字段，即回复人的名字和被回复人的名字</div><div class="line">    .exec(function(err, comments)&#123;</div><div class="line">      res.render(&apos;detail&apos;, &#123;</div><div class="line">        title: &quot;&quot; + movie.title,</div><div class="line">        movie: movie,</div><div class="line">        comments: comments</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="电影分类功能的实现"><a href="#电影分类功能的实现" class="headerlink" title="电影分类功能的实现"></a>电影分类功能的实现</h3><h4 id="分类的数据模型"><a href="#分类的数据模型" class="headerlink" title="分类的数据模型"></a>分类的数据模型</h4><p>schemas/category.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">let CategorySchema = new mongoose.Schema(&#123;</div><div class="line">  name: String,</div><div class="line">  movies: [&#123;</div><div class="line">    type: ObjectId,</div><div class="line">    ref: &apos;Movie&apos;</div><div class="line">  &#125;],</div><div class="line">  meta: &#123;</div><div class="line">    createAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;,</div><div class="line">    updateAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="分类后台录入及存储"><a href="#分类后台录入及存储" class="headerlink" title="分类后台录入及存储"></a>分类后台录入及存储</h4><h5 id="增加路由信息"><a href="#增加路由信息" class="headerlink" title="增加路由信息"></a>增加路由信息</h5><p>routes.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let Category = require(&apos;../app/controllers/category&apos;);</div><div class="line"></div><div class="line">// Category</div><div class="line">app.post(&apos;/admin/category/save&apos;, User.signinRequired, User.adminRequired, Category.save);</div><div class="line">app.get(&apos;/admin/category/new&apos;, User.signinRequired, User.adminRequired, Category.new);</div><div class="line">app.get(&apos;/admin/category/list&apos;, User.signinRequired, User.adminRequired, Category.list);</div></pre></td></tr></table></figure></p>
<h5 id="分类的控制器"><a href="#分类的控制器" class="headerlink" title="分类的控制器"></a>分类的控制器</h5><p>controllers/category.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">let Category = require(&apos;../models/category&apos;);</div><div class="line"></div><div class="line">// Routes for category</div><div class="line">exports.new = function(req, res)&#123;</div><div class="line">  res.render(&apos;admin_category&apos;, &#123;</div><div class="line">    title: &apos;后台分类录入页&apos;,</div><div class="line">    category: &#123;&#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.save = function(req, res)&#123;</div><div class="line">  let _category = req.body.category;</div><div class="line">  let category = new Caterory(_category);</div><div class="line"></div><div class="line">  category.save(function(err)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.redirect(&apos;/admin/category/list&apos;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.list = function(req, res)&#123;</div><div class="line">  Category.fetch(function(err, categories)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.render(&apos;catetorylist&apos;, &#123;</div><div class="line">      title: &apos;分类列表页&apos;,</div><div class="line">      categories: categories</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h5 id="增加相关页面"><a href="#增加相关页面" class="headerlink" title="增加相关页面"></a>增加相关页面</h5><p>admin_category.jade、categorylist.jade。（类似于admin.jade、list.jade，略）</p>
<h4 id="电影录入增加分类选择"><a href="#电影录入增加分类选择" class="headerlink" title="电影录入增加分类选择"></a>电影录入增加分类选择</h4><h5 id="为电影增加字段"><a href="#为电影增加字段" class="headerlink" title="为电影增加字段"></a>为电影增加字段</h5><p>修改schemas/movie.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let Schema = mongoose.Schema;</div><div class="line">let ObjectId = Schema.Types.ObjectId;</div><div class="line"></div><div class="line">category: &#123;</div><div class="line">    type: ObjectId,</div><div class="line">    ref: &apos;Category&apos;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h5 id="增加“电影分类”表单项"><a href="#增加“电影分类”表单项" class="headerlink" title="增加“电影分类”表单项"></a>增加“电影分类”表单项</h5><p>修改admin.jade：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.form-group</div><div class="line">  label.col-sm-2.control-label(for=&quot;inputCategory&quot;) 电影分类</div><div class="line">    .col-sm-8</div><div class="line">      input#inputCategory.form-control(type=&quot;text&quot;, name=&quot;movie[category_new]&quot;)</div><div class="line">.form-group</div><div class="line">  label.col-sm-2.control-label(for=&quot;radioCategory&quot;)</div><div class="line">  each cat in categories</div><div class="line">    label.radio-inline</div><div class="line">      if movie._id</div><div class="line">        input#radioCategory(type=&quot;radio&quot;, name=&quot;movie[category]&quot;, value=cat._id, checked=cat._id.toString()==movie.category.toString())</div><div class="line">        | #&#123;cat.name&#125;</div><div class="line">      else</div><div class="line">        input#radioCategory(type=&quot;radio&quot;, name=&quot;movie[category]&quot;, value=cat._id)</div><div class="line">        | #&#123;cat.name&#125;</div></pre></td></tr></table></figure></p>
<h5 id="修改movie控制器"><a href="#修改movie控制器" class="headerlink" title="修改movie控制器"></a>修改movie控制器</h5><p>controllers/movie.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">exports.new = function(req, res)&#123;</div><div class="line">  Category.find(&#123;&#125;, function(err, categories)&#123;</div><div class="line">    res.render(&apos;admin&apos;, &#123;</div><div class="line">      title: &apos;后台录入页&apos;,</div><div class="line">      categories: categories,</div><div class="line">      movie: &#123;&#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.save = function(req, res)&#123;</div><div class="line">  let id = req.body.movie._id;</div><div class="line">  let movieObj = req.body.movie;</div><div class="line">  let _movie;</div><div class="line"></div><div class="line">  if(id)&#123;</div><div class="line">    //...</div><div class="line">  &#125;else&#123;</div><div class="line">    let categoryId = movieObj.category;</div><div class="line">    _movie = new Movie(movieObj);</div><div class="line">    _movie.save(function(err, movie)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line">      Category.findById(categoryId, function(err, category)&#123;</div><div class="line">        category.movies.push(movie._id);</div><div class="line">        category.save(function(err, category)&#123;</div><div class="line">          res.redirect(&apos;/admin/movie/list&apos;);</div><div class="line">        &#125;);</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.update = function(req, res)&#123;</div><div class="line">  let id = req.params.id;</div><div class="line">  if(id)&#123;</div><div class="line">    Movie.findById(id, function(err, movie)&#123;</div><div class="line">      Category.find(&#123;&#125;, function(err, categories)&#123;</div><div class="line">        res.render(&apos;admin&apos;, &#123;</div><div class="line">          title: &apos;后台更新页&apos;,</div><div class="line">          movie: movie,</div><div class="line">          categories: categories</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="分类效果展示"><a href="#分类效果展示" class="headerlink" title="分类效果展示"></a>分类效果展示</h4><h5 id="首页控制器"><a href="#首页控制器" class="headerlink" title="首页控制器"></a>首页控制器</h5><p>index.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">exports.index = function(req, res)&#123;</div><div class="line">  Category</div><div class="line">    .find(&#123;&#125;)</div><div class="line">    .populate(&#123;path: &apos;movies&apos;, options: &#123;limit: 5&#125;&#125;)</div><div class="line">    .exec(function(err, categories)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">          console.log(err);</div><div class="line">        &#125;</div><div class="line">        res.render(&apos;index&apos;, &#123;</div><div class="line">          title: &apos;首页&apos;,</div><div class="line">          categories: categories</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h5 id="首页视图"><a href="#首页视图" class="headerlink" title="首页视图"></a>首页视图</h5><p>index.jade<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for cat in categories</div><div class="line">  .panel.panel-default</div><div class="line">    .panel-heading</div><div class="line">      h3 #&#123;cat.name&#125;</div><div class="line">    .panel-body</div><div class="line">      if cat.movies &amp;&amp; cat.movies.length &gt; 0</div><div class="line">        for item in cat.movies</div><div class="line">        //...</div></pre></td></tr></table></figure></p>
<h4 id="jsonp同步豆瓣数据"><a href="#jsonp同步豆瓣数据" class="headerlink" title="jsonp同步豆瓣数据"></a>jsonp同步豆瓣数据</h4><p>admin.jade 增加”豆瓣同步”表单项, 并引入admin.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.form-group</div><div class="line">  label.col-sm-2.control-label(for=&quot;inputTitle&quot;) 豆瓣同步</div><div class="line">    .col-sm-8</div><div class="line">      input#douban.form-control(type=&quot;text&quot;)</div><div class="line"></div><div class="line">script(src=&quot;/js/admin.js&quot;)</div></pre></td></tr></table></figure></p>
<p>编辑admin.js, 通过ajax加载豆瓣数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">  //...</div><div class="line">  $(&apos;#douban&apos;).blur(function()&#123;</div><div class="line">    let id = $(this).val();   // 电影id</div><div class="line">    $.ajax(&#123;</div><div class="line">      url: &apos;https://api.douban.com/v2/movie/subject/&apos; + id,</div><div class="line">      cache: true,</div><div class="line">      type: &apos;get&apos;,</div><div class="line">      dataType: &apos;jsonp&apos;,</div><div class="line">      crossDomain: true,</div><div class="line">      jspnp: &apos;callback&apos;,</div><div class="line">      success: function(data)&#123;</div><div class="line">        $(&apos;#inputTitle&apos;).val(data.title);</div><div class="line">        $(&apos;#inputDirector&apos;).val(data.directors[0].name);</div><div class="line">        $(&apos;#inputCountry&apos;).val(data.countries[0]);</div><div class="line">        $(&apos;#inputPoster&apos;).val(data.images.large);</div><div class="line">        $(&apos;#inputShowAt&apos;).val(data.year);</div><div class="line">        $(&apos;#inputSummary&apos;).val(data.summary);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在豆瓣电影中查找电影id，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://movie.douban.com/subject/26363254/?from=showing   // id=26363254</div></pre></td></tr></table></figure></p>
<p>输入表单后，效果如图：<br><img src="/uploads/douban-example.png" alt="Alt Text"></p>
<blockquote>
<p>豆瓣开发者文档： <a href="https://developers.douban.com/wiki/?title=guide" target="_blank" rel="external">https://developers.douban.com/wiki/?title=guide</a></p>
</blockquote>
<h4 id="电影录入增加自定义分类"><a href="#电影录入增加自定义分类" class="headerlink" title="电影录入增加自定义分类"></a>电影录入增加自定义分类</h4><p>修改controllers/movie.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">exports.save = function(req, res)&#123;</div><div class="line">  if(id)&#123;</div><div class="line">    //...</div><div class="line">  &#125;else&#123;</div><div class="line">    let categoryId = movieObj.category;</div><div class="line">    let categoryName = movieObj.category_new;</div><div class="line">    _movie = new Movie(movieObj);</div><div class="line">    _movie.save(function(err, movie)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line">      if(categoryId)&#123; // 已有分类</div><div class="line">        Category.findById(categoryId, function(err, category)&#123;</div><div class="line">          category.movies.push(movie._id);</div><div class="line">          category.save(function(err, category)&#123;</div><div class="line">            res.redirect(&apos;/admin/movie/list&apos;);</div><div class="line">          &#125;);</div><div class="line">        &#125;)</div><div class="line">      &#125;else if(categoryName)&#123; // 新分类</div><div class="line">        let category = new Category(&#123;</div><div class="line">          name: categoryName,</div><div class="line">          movies: [movie._id]</div><div class="line">        &#125;);</div><div class="line">        category.save(function(err, category)&#123;</div><div class="line">          _movie.category = category._id;</div><div class="line">          _movie.save(function(err, movie)&#123; // 注意：movie要保存两次</div><div class="line">            res.redirect(&apos;/admin/movie/list&apos;);</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="增加分类列表及分页"><a href="#增加分类列表及分页" class="headerlink" title="增加分类列表及分页"></a>增加分类列表及分页</h4><p>修改index.jade,为分类标题增加链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h3</div><div class="line">  a(href=&quot;/category/search?catId=#&#123;cat._id&#125;&amp;page=1&quot;) #&#123;cat.name&#125;</div></pre></td></tr></table></figure></p>
<p>增加路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.get(&apos;/category/search&apos;, Category.search);</div></pre></td></tr></table></figure></p>
<p>增加后台逻辑处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">exports.search = function(req, res)&#123;</div><div class="line">	let catId = req.query.catId;</div><div class="line">	let page = parseInt(req.query.page, 10) || 0;</div><div class="line">	let perPage = 5;</div><div class="line">	let index = (page - 1) * perPage;</div><div class="line"></div><div class="line">	Category</div><div class="line">		.find(&#123;_id: catId&#125;)</div><div class="line">		.populate(&#123;</div><div class="line">			path: &apos;movies&apos;,</div><div class="line">			select: &apos;title poster&apos;</div><div class="line">		&#125;)</div><div class="line">		.exec(function(err, categories)&#123;</div><div class="line">			if(err)&#123;</div><div class="line">				console.log(err);</div><div class="line">			&#125;</div><div class="line">			let category = categories[0] || &#123;&#125;;</div><div class="line">			let movies = category.movies || [];</div><div class="line">			let results = movies.slice(index, index + perPage);</div><div class="line"></div><div class="line">			res.render(&apos;results&apos;, &#123;</div><div class="line">				title: &apos;分类&apos;,</div><div class="line">				query: &apos;catId=&apos; + catId,</div><div class="line">				keyword: category.name,</div><div class="line">				currentPage: page,</div><div class="line">				totalPage: Math.ceil(movies.length / perPage),</div><div class="line">				movies: results</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>展示页面results.jade：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">extends ../layout</div><div class="line"></div><div class="line">block content</div><div class="line">	.container</div><div class="line">		.row</div><div class="line">			.panel.panel-default</div><div class="line">				.panel-heading</div><div class="line">					h3</div><div class="line">						if query</div><div class="line">							a(href=&quot;/category/search?#&#123;query&#125;&amp;page=1&quot;) #&#123;keyword&#125;</div><div class="line">						else</div><div class="line">							a(href=&quot;/movie/search?keyword=#&#123;keyword&#125;&amp;page=1&quot;) #&#123;keyword&#125;</div><div class="line">				.panel-body</div><div class="line">					if movies &amp;&amp; movies.length &gt; 0</div><div class="line">						for item in movies</div><div class="line">							.col-md-2</div><div class="line">								.thumbnail</div><div class="line">									a(href=&quot;/movie/#&#123;item._id&#125;&quot;)</div><div class="line">										img(src=&quot;#&#123;item.poster&#125;&quot;, alt=&quot;#&#123;item.title&#125;&quot;)</div><div class="line">									.caption</div><div class="line">										h3 #&#123;item.title&#125;</div><div class="line">										p: a.btn.btn-primary(href=&quot;/movie/#&#123;item._id&#125;&quot;, role=&quot;button&quot;) 观看预告片</div><div class="line">			ul.pagination.col-md-6.col-md-offset-3</div><div class="line">				- for(let i = 0; i &lt; totalPage; i++)&#123;</div><div class="line">					- if(currentPage == (i + 1))&#123;</div><div class="line">						li.active</div><div class="line">							span #&#123;currentPage&#125;</div><div class="line">					- &#125;else&#123;</div><div class="line">						li</div><div class="line">							if query</div><div class="line">								a(href=&apos;/category/search?#&#123;query&#125;&amp;page=#&#123;i + 1&#125;&apos;) #&#123;i + 1&#125;</div><div class="line">							else</div><div class="line">								a(href=&apos;/movie/search?keyword=#&#123;keyword&#125;&amp;page=#&#123;i + 1&#125;&apos;) #&#123;i + 1&#125;</div><div class="line">					- &#125;</div><div class="line">				- &#125;</div></pre></td></tr></table></figure></p>
<h4 id="搜索功能的实现"><a href="#搜索功能的实现" class="headerlink" title="搜索功能的实现"></a>搜索功能的实现</h4><p>增加搜索框head.jade:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">form.navbar-form.navbar-left(method=&quot;get&quot;, action=&quot;/movie/search&quot;)</div><div class="line">  .form-group</div><div class="line">    input.form-control(type=&quot;text&quot;, placeholder=&quot;Search&quot;, name=&quot;keyword&quot;)</div><div class="line">    button.btn.btn-default(type=&quot;submit&quot;) Submit</div></pre></td></tr></table></figure></p>
<p>增加路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 应放在 app.get(&apos;/movie/:id&apos;, Movie.detail) 之前，否则会有冲突</div><div class="line">app.get(&apos;/movie/search&apos;, Movie.search);</div></pre></td></tr></table></figure></p>
<p>增加后台逻辑处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">exports.search = function(req, res)&#123;</div><div class="line">	let keyword = req.query.keyword;</div><div class="line">	let page = parseInt(req.query.page) || 1;</div><div class="line">	let perPage = 5;</div><div class="line">	Movie</div><div class="line">		.find(&#123;title: new RegExp(&apos;.*&apos; + keyword + &apos;.*&apos;)&#125;, function(err, movies)&#123;</div><div class="line">			if(err)&#123;</div><div class="line">				console.log(err);</div><div class="line">			&#125;</div><div class="line">			res.render(&apos;results&apos;, &#123;</div><div class="line">				title: &apos;分类&apos;,</div><div class="line">				keyword: keyword,</div><div class="line">				currentPage: page,</div><div class="line">				totalPage: Math.ceil(movies.length / perPage),</div><div class="line">				movies: movies</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="上传海报"><a href="#上传海报" class="headerlink" title="上传海报"></a>上传海报</h4><p>增加文件选择表单项<br>admin.jade:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">form.form-horizontal(method=&quot;post&quot;, action=&quot;/admin/movie/save&quot;, enctype=&quot;multipart/form-data&quot;)</div><div class="line">  .form-group</div><div class="line">    label.col-sm-2.control-label(for=&quot;uploadPoster&quot;) 上传海报</div><div class="line">    .col-sm-8</div><div class="line">      input#uploadPoster(type=&quot;file&quot;, name=&quot;uploadPoster&quot;)</div></pre></td></tr></table></figure></p>
<p>为系统增加中间件：(cnpm install connect-multiparty –save)<br>app.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let multipart = require(&apos;connect-multiparty&apos;);</div><div class="line">app.use(multipart());</div></pre></td></tr></table></figure></p>
<p>为保存电影增加中间件posterUploaded，以保证图片上传成功（这里最好采用异步方式）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.post(&apos;/admin/movie/save&apos;, User.signinRequired, User.adminRequired, Movie.posterUploaded, Movie.save);</div></pre></td></tr></table></figure></p>
<p>具体实现，controllers/movie.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">exports.posterUploaded = function(req, res, next)&#123;</div><div class="line">	let posterData = req.files.uploadPoster;</div><div class="line">	let filePath = posterData.path;</div><div class="line">	let originalFilename = posterData.originalFilename;</div><div class="line"></div><div class="line">	if(originalFilename)&#123;</div><div class="line">		fs.readFile(filePath, function(err, data)&#123;</div><div class="line">			let timestamp = Date.now();</div><div class="line">			let type = posterData.type.split(&apos;/&apos;)[1];</div><div class="line">			let newPosterName = timestamp + &apos;.&apos; + type;</div><div class="line">			let newPath = path.join(__dirname, &apos;../../public/images/&apos; + newPosterName);</div><div class="line"></div><div class="line">			fs.writeFile(newPath, data, function(err)&#123;</div><div class="line">				req.newPosterName = &apos;/images/&apos; + newPosterName;</div><div class="line">				next();</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">	&#125;else&#123;</div><div class="line">		next();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在保存电影之前，判断是否上传了图片，并替换之：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">exports.save = function(req, res)&#123;</div><div class="line">	let movieObj = req.body.movie;</div><div class="line"></div><div class="line">	if(req.newPosterName)&#123;</div><div class="line">		movieObj.poster = req.newPosterName;</div><div class="line">	&#125;</div><div class="line">  //...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="访客统计"><a href="#访客统计" class="headerlink" title="访客统计"></a>访客统计</h4><p>为movie增加字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pv: &#123;</div><div class="line">  type: Number,</div><div class="line">  default: 0</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>每当访问详情页时，访问量 +1 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">exports.detail = function(req, res)&#123;</div><div class="line">	let id = req.params.id;</div><div class="line">	Movie.update(&#123;_id: id&#125;, &#123;$inc: &#123;pv: 1&#125;&#125;, function(err)&#123;</div><div class="line">		if(err)&#123;</div><div class="line">			console.log(err);</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	// ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>展示：在列表页增加“访客统计”字段，即可。</p>
<blockquote>
<p><a href="https://jochen-m.github.io/2017/05/26/Nodejs-Express-MongoDB快速搭建网站/">《Nodejs + Express + MongoDB快速搭建网站》</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongoose简单操作实例]]></title>
      <url>/2017/06/15/mongoose%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>Mongoose API: <a href="http://mongoosejs.com/docs/api.html" target="_blank" rel="external">http://mongoosejs.com/docs/api.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">// mongoose 链接</div><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">var db       = mongoose.createConnection(&apos;mongodb://127.0.0.1:27017/NodeJS&apos;);</div><div class="line"></div><div class="line">// 链接错误</div><div class="line">db.on(&apos;error&apos;, function(error) &#123;</div><div class="line">    console.log(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// Schema 结构</div><div class="line">var MongooseSchema = new mongoose.Schema(&#123;</div><div class="line">    username : &#123;type : String, default : &apos;匿名用户&apos;&#125;,</div><div class="line">    title    : &#123;type : String&#125;,</div><div class="line">    content  : &#123;type : String&#125;,</div><div class="line">    time     : &#123;type : Date, default: Date.now&#125;,</div><div class="line">    age      : &#123;type : Number&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 添加 mongoose 实例方法</div><div class="line">MongooseSchema.methods.findbyusername = function(username, callback) &#123;</div><div class="line">    return this.model(&apos;mongoose&apos;).find(&#123;username: username&#125;, callback);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 添加 mongoose 静态方法，静态方法在Model层就能使用</div><div class="line">MongooseSchema.statics.findbytitle = function(title, callback) &#123;</div><div class="line">    return this.model(&apos;mongoose&apos;).find(&#123;title: title&#125;, callback);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// model</div><div class="line">var MongooseModel = db.model(&apos;mongoose&apos;, MongooseSchema);</div><div class="line"></div><div class="line">// 增加记录 基于 entity 操作</div><div class="line">var doc = &#123;username : &apos;emtity_demo_username&apos;, title : &apos;emtity_demo_title&apos;, content : &apos;emtity_demo_content&apos;&#125;;</div><div class="line">var mongooseEntity = new MongooseModel(doc);</div><div class="line">mongooseEntity.save(function(error) &#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;saved OK!&apos;);</div><div class="line">    &#125;</div><div class="line">    // 关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div><div class="line">// 增加记录 基于model操作</div><div class="line">var doc = &#123;username : &apos;model_demo_username&apos;, title : &apos;model_demo_title&apos;, content : &apos;model_demo_content&apos;&#125;;</div><div class="line">MongooseModel.create(doc, function(error)&#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;save ok&apos;);</div><div class="line">    &#125;</div><div class="line">    // 关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 修改记录</div><div class="line">MongooseModel.update(conditions, update, options, callback);</div><div class="line">var conditions = &#123;username : &apos;model_demo_username&apos;&#125;;</div><div class="line">var update     = &#123;$set : &#123;age : 27, title : &apos;model_demo_title_update&apos;&#125;&#125;;</div><div class="line">var options    = &#123;upsert : true&#125;;</div><div class="line">MongooseModel.update(conditions, update, options, function(error)&#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;update ok!&apos;);</div><div class="line">    &#125;</div><div class="line">    //关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 查询</div><div class="line">// 基于实例方法的查询</div><div class="line">var mongooseEntity = new MongooseModel(&#123;&#125;);</div><div class="line">mongooseEntity.findbyusername(&apos;model_demo_username&apos;, function(error, result)&#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(result);</div><div class="line">    &#125;</div><div class="line">    //关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div><div class="line">// 基于静态方法的查询</div><div class="line">MongooseModel.findbytitle(&apos;emtity_demo_title&apos;, function(error, result)&#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(result);</div><div class="line">    &#125;</div><div class="line">    //关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div><div class="line">// mongoose find</div><div class="line">var criteria = &#123;title : &apos;emtity_demo_title&apos;&#125;; // 查询条件</div><div class="line">var fields   = &#123;title : 1, content : 1, time : 1&#125;; // 待返回的字段</div><div class="line">var options  = &#123;&#125;;</div><div class="line">MongooseModel.find(criteria, fields, options, function(error, result)&#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(result);</div><div class="line">    &#125;</div><div class="line">    //关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 删除记录</div><div class="line">var conditions = &#123;username: &apos;emtity_demo_username&apos;&#125;;</div><div class="line">MongooseModel.remove(conditions, function(error)&#123;</div><div class="line">    if(error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;delete ok!&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //关闭数据库链接</div><div class="line">    db.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> MongoDB </tag>
            
            <tag> mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DSS 密钥生成与数字签名]]></title>
      <url>/2017/06/13/DSS-%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import java.security.*;</div><div class="line"></div><div class="line">public class DSS &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        DSS dss = new DSS();</div><div class="line">        dss.run();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run()&#123;</div><div class="line">        // 生成密钥对，如果已经生成过，本过程就可以跳过</div><div class="line">        // 发送方的私钥文件prikey.dat要保存在本地，而公钥文件pubkey.dat则发送给接收方</div><div class="line">        if((new File(&quot;prikey.dat&quot;)).exists() == false)&#123;</div><div class="line">            if(generatekey() == false)&#123;</div><div class="line">                System.out.println(&quot;生成密钥对失败&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 发送方从文件中读入私钥，对消息进行签名后保存在一个文件（msgwithsign.dat）中</div><div class="line">        // 然后再把msgwithsign.dat发送给接收方，</div><div class="line">        // 数字签名可以放进msgwithsign.dat文件中，也可以分别发送</div><div class="line">        try&#123;</div><div class="line">            ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;prikey.dat&quot;));</div><div class="line">            PrivateKey prikey = (PrivateKey) in.readObject();</div><div class="line">            in.close();</div><div class="line"></div><div class="line">            // 读入要签名的信息</div><div class="line">            BufferedReader br = new BufferedReader(</div><div class="line">                    new InputStreamReader(new FileInputStream(&quot;plaintext.txt&quot;)));</div><div class="line">            String msgwithsign = br.readLine();</div><div class="line"></div><div class="line">            // 用私钥对信息生成数字签名</div><div class="line">            Signature sign1 = Signature.getInstance(&quot;DSA&quot;);</div><div class="line">            sign1.initSign(prikey);</div><div class="line">            sign1.update(msgwithsign.getBytes());</div><div class="line">            byte[] signofmsg = sign1.sign();    // 对信息的数字签名</div><div class="line">            System.out.println(&quot;数字签名：&quot; + byte2hex(signofmsg));</div><div class="line"></div><div class="line">            // 此处把信息和数字签名保存在一个文件中</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(</div><div class="line">                    new FileOutputStream(&quot;msgwithsign.dat&quot;));</div><div class="line">            out.writeObject(msgwithsign);</div><div class="line">            out.writeObject(signofmsg);</div><div class="line">            out.close();</div><div class="line">            System.out.println(&quot;签名并生成文件成功&quot;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(&quot;签名时发生错误！&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 接收方通过某种方式得到发送方的公钥和签名文件，</div><div class="line">        // 然后用公钥对签名进行验证</div><div class="line">        try&#123;</div><div class="line">            ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;pubkey.dat&quot;));</div><div class="line">            PublicKey pubkey = (PublicKey) in.readObject();</div><div class="line">            in.close();</div><div class="line">            in = new ObjectInputStream(new FileInputStream(&quot;msgwithsign.dat&quot;));</div><div class="line">            String msg = (String) in.readObject();</div><div class="line">            byte[] signofmsg = (byte[]) in.readObject();</div><div class="line">            in.close();</div><div class="line">            Signature sign2 = Signature.getInstance(&quot;DSA&quot;);</div><div class="line">            sign2.initVerify(pubkey);</div><div class="line">            sign2.update(msg.getBytes());</div><div class="line">            if(sign2.verify(signofmsg))&#123;</div><div class="line">                System.out.println(&quot;消息内容：&quot; + msg);</div><div class="line">                System.out.println(&quot;签名有效&quot;);</div><div class="line">            &#125;else&#123;</div><div class="line">                System.out.println(&quot;非正常签名&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 生成密钥对的函数</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public boolean generatekey()&#123;</div><div class="line">        try&#123;</div><div class="line">            KeyPairGenerator keygen = KeyPairGenerator.getInstance(&quot;DSA&quot;);</div><div class="line">            keygen.initialize(512);</div><div class="line">            KeyPair keys = keygen.generateKeyPair();</div><div class="line">            PublicKey pubkey = keys.getPublic();</div><div class="line">            PrivateKey prikey = keys.getPrivate();</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;prikey.dat&quot;));</div><div class="line">            out.writeObject(prikey);</div><div class="line">            out.close();</div><div class="line">            System.out.println(&quot;写入对象 prikeys ok&quot;);</div><div class="line">            out = new ObjectOutputStream(new FileOutputStream(&quot;pubkey.dat&quot;));</div><div class="line">            out.writeObject(pubkey);</div><div class="line">            out.close();</div><div class="line">            System.out.println(&quot;写入对象 pubkeys ok&quot;);</div><div class="line">            System.out.println(&quot;生成密钥对成功&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(&quot;生成密钥对失败&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static String byte2hex(byte[] ba)&#123;</div><div class="line">        String strout = &quot;&quot;;</div><div class="line">        for(int i = 0; i &lt; ba.length; i++)&#123;</div><div class="line">            int j = ba[i] &lt; 0? ba[i] + 256 : ba[i];</div><div class="line">            String str = Integer.toHexString(j);</div><div class="line">            while(str.length() &lt; 2)</div><div class="line">                str = &apos;0&apos; + str;</div><div class="line">            if(i &lt; ba.length - 1)</div><div class="line">                strout += (str + &quot;-&quot;);</div><div class="line">            else</div><div class="line">                strout += str;</div><div class="line">        &#125;</div><div class="line">        return strout.toUpperCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Safe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MD5 消息摘要密码算法]]></title>
      <url>/2017/06/13/MD5-%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import java.security.MessageDigest;</div><div class="line"></div><div class="line">public class MD5 &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        try &#123;</div><div class="line">            // 读取明文</div><div class="line">            BufferedReader br = new BufferedReader(</div><div class="line">                    new InputStreamReader(new FileInputStream(&quot;plaintext.txt&quot;)));</div><div class="line">            String message1 = br.readLine();</div><div class="line">            br.close();</div><div class="line">            System.out.println(&quot;消息：&quot; + message1);</div><div class="line"></div><div class="line">            // 生成一个信息摘要类，定义消息摘要算法</div><div class="line">            MessageDigest md1 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line"></div><div class="line">            // 添加消息</div><div class="line">            md1.update(message1.getBytes());</div><div class="line"></div><div class="line">            // 计算摘要</div><div class="line">            byte[] digest = md1.digest();</div><div class="line">            System.out.println(&quot;摘要：&quot; + byte2hex(digest));</div><div class="line"></div><div class="line">            // 将摘要写入文件</div><div class="line">            try (PrintWriter pw = new PrintWriter(&quot;digest.txt&quot;))&#123;</div><div class="line">                pw.print(byte2hex(digest));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 接收方用相同的方法初始化，添加消息，然后比较摘要是否相同</div><div class="line">            br = new BufferedReader(</div><div class="line">                    new InputStreamReader(new FileInputStream(&quot;plaintext.txt&quot;)));</div><div class="line">            String message2 = br.readLine();</div><div class="line">            br.close();</div><div class="line">            MessageDigest md2 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">            md2.update(message2.getBytes());</div><div class="line">            System.out.println(&quot;验证结果：&quot; + md2.isEqual(digest, md2.digest()));</div><div class="line">        &#125; catch (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static String byte2hex(byte[] ba)&#123;</div><div class="line">        String strout = &quot;&quot;;</div><div class="line">        for(int i = 0; i &lt; ba.length; i++)&#123;</div><div class="line">            int j = ba[i] &lt; 0? ba[i] + 256 : ba[i];</div><div class="line">            String str = Integer.toHexString(j);</div><div class="line">            while(str.length() &lt; 2)</div><div class="line">                str = &apos;0&apos; + str;</div><div class="line">            if(i &lt; ba.length - 1)</div><div class="line">                strout += (str + &quot;-&quot;);</div><div class="line">            else</div><div class="line">                strout += str;</div><div class="line">        &#125;</div><div class="line">        return strout.toUpperCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Safe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RSA 公钥密码算法]]></title>
      <url>/2017/06/12/RSA-%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>与数字签名不同，公钥密码算法中用公钥进行加密，用私钥进行解密。</p>
<p>Java代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import java.math.BigInteger;</div><div class="line">import java.security.KeyPair;</div><div class="line">import java.security.KeyPairGenerator;</div><div class="line">import java.security.PrivateKey;</div><div class="line">import java.security.PublicKey;</div><div class="line">import java.security.interfaces.RSAPrivateKey;</div><div class="line">import java.security.interfaces.RSAPublicKey;</div><div class="line"></div><div class="line">public class RSA &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        RSA rsa = new RSA();</div><div class="line">        rsa.run();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run()&#123;</div><div class="line">        // 生成密钥对，如果已经生成过，本过程就可以跳过</div><div class="line">        if((new File(&quot;RSAprikey.dat&quot;)).exists() == false)&#123;</div><div class="line">            if(generatekey() == false)&#123;</div><div class="line">                System.out.println(&quot;生成密钥对失败&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            // 读入公钥文件，重建公钥</div><div class="line">            ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;RSApubkey.dat&quot;));</div><div class="line">            RSAPublicKey pubkey = (RSAPublicKey) in.readObject();</div><div class="line">            in.close();</div><div class="line"></div><div class="line">            // 从公钥中读出参数e和n</div><div class="line">            BigInteger e = pubkey.getPublicExponent();</div><div class="line">            BigInteger n = pubkey.getModulus();</div><div class="line">            System.out.println(&quot;公钥参数e：&quot; + e);</div><div class="line">            System.out.println(&quot;公钥参数n：&quot; + n);</div><div class="line"></div><div class="line">            String plainText;</div><div class="line">            // 读取明文</div><div class="line">            try (BufferedReader br = new BufferedReader(</div><div class="line">                    new InputStreamReader(new FileInputStream(&quot;plaintext.txt&quot;)))) &#123;</div><div class="line">                plainText = br.readLine();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 给定明文编码成大整数</div><div class="line">            byte plainbytes[] = plainText.getBytes(&quot;UTF8&quot;);</div><div class="line">            BigInteger plainBI = new BigInteger(plainbytes);</div><div class="line">            System.out.println(&quot;明文：&quot; + plainText);</div><div class="line">            System.out.println(&quot;明文编码：&quot; + plainBI.toString());</div><div class="line"></div><div class="line">            // 计算密文</div><div class="line">            BigInteger cipherBI = plainBI.modPow(e, n);</div><div class="line">            System.out.println(&quot;密文编码：&quot; + cipherBI.toString());</div><div class="line"></div><div class="line">            // 把密文保存到本地文件中</div><div class="line">            String cipherText = cipherBI.toString();</div><div class="line">            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(</div><div class="line">                    new FileOutputStream(&quot;RSACipher.dat&quot;)));</div><div class="line">            out.write(cipherText, 0, cipherText.length());</div><div class="line">            out.close();</div><div class="line">        &#125; catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(&quot;加密时发生错误！&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            // 通过私钥文件重建私钥</div><div class="line">            ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;RSAprikey.dat&quot;));</div><div class="line">            RSAPrivateKey prikey = (RSAPrivateKey) in.readObject();</div><div class="line">            in.close();</div><div class="line"></div><div class="line">            //获取私钥参数</div><div class="line">            BigInteger d = prikey.getPrivateExponent();</div><div class="line">            BigInteger n = prikey.getModulus();</div><div class="line">            System.out.println(&quot;私钥参数d：&quot; + d);</div><div class="line">            System.out.println(&quot;私钥参数n：&quot; + n);</div><div class="line"></div><div class="line">            // 读出密文</div><div class="line">            BufferedReader incipher = new BufferedReader(new InputStreamReader(</div><div class="line">                    new FileInputStream(&quot;RSACipher.dat&quot;)));</div><div class="line">            String cipherText = incipher.readLine();</div><div class="line">            incipher.close();</div><div class="line">            BigInteger cipherBI = new BigInteger(cipherText);</div><div class="line"></div><div class="line">            // 解密</div><div class="line">            BigInteger plainBI = cipherBI.modPow(d, n);</div><div class="line">            System.out.println(&quot;解出明文的编码：&quot; + plainBI);</div><div class="line">            byte[] plainbytes = plainBI.toByteArray();</div><div class="line">            System.out.print(&quot;解出的明文：&quot;);</div><div class="line">            for(int i = 0; i &lt; plainbytes.length; i++)&#123;</div><div class="line">                System.out.print((char) plainbytes[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean generatekey()&#123;</div><div class="line">        try&#123;</div><div class="line">            KeyPairGenerator keygen = KeyPairGenerator.getInstance(&quot;RSA&quot;);</div><div class="line">            keygen.initialize(1024);</div><div class="line">            KeyPair keys = keygen.generateKeyPair();</div><div class="line">            PublicKey pubkey = keys.getPublic();</div><div class="line">            PrivateKey prikey = keys.getPrivate();</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;RSAprikey.dat&quot;));</div><div class="line">            out.writeObject(prikey);</div><div class="line">            out.close();</div><div class="line">            System.out.println(&quot;写入对象 prikeys ok&quot;);</div><div class="line">            out = new ObjectOutputStream(new FileOutputStream(&quot;RSApubkey.dat&quot;));</div><div class="line">            out.writeObject(pubkey);</div><div class="line">            out.close();</div><div class="line">            System.out.println(&quot;写入对象 pubkeys ok&quot;);</div><div class="line">            System.out.println(&quot;生成密钥对成功&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(&quot;生成密钥对失败&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Safe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DES 对称密码算法]]></title>
      <url>/2017/06/12/DES-%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><em>对称加密算法</em>是应用较早的加密算法，技术成熟。在对称加密算法中，数据发信方将明文（原始数据）和加密密钥一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。</p>
<p>Java代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">import javax.crypto.*;</div><div class="line">import java.io.*;</div><div class="line">import java.security.Key;</div><div class="line">import java.security.Security;</div><div class="line"></div><div class="line">public class DES &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        DES des = new DES();</div><div class="line">        des.run();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run()&#123;</div><div class="line">        Security.addProvider(new com.sun.crypto.provider.SunJCE());</div><div class="line">        String Algorithm = &quot;DES&quot;;</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            String plainText;</div><div class="line">            // 读取明文</div><div class="line">            try (BufferedReader br = new BufferedReader(</div><div class="line">                new InputStreamReader(new FileInputStream(&quot;plaintext.txt&quot;)))) &#123;</div><div class="line">                plainText = br.readLine();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 生成密钥</div><div class="line">            KeyGenerator keygen = KeyGenerator.getInstance(Algorithm);</div><div class="line">            SecretKey deskey = keygen.generateKey();</div><div class="line"></div><div class="line">            // 密钥材料存储于本地</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;deskey.dat&quot;));</div><div class="line">            out.writeObject(deskey);</div><div class="line">            out.close();</div><div class="line"></div><div class="line">            // 加密</div><div class="line">            System.out.println(&quot;明文：&quot; + plainText);</div><div class="line">            Cipher c1 = Cipher.getInstance(Algorithm);</div><div class="line">            c1.init(Cipher.ENCRYPT_MODE, deskey);</div><div class="line">            byte[] cipherByte = c1.doFinal(plainText.getBytes());</div><div class="line">            System.out.println(&quot;摘要：&quot; + byte2hex(cipherByte));</div><div class="line"></div><div class="line">            // 将密文写入文件</div><div class="line">            try (PrintWriter pw = new PrintWriter(&quot;cipherText.txt&quot;))&#123;</div><div class="line">                pw.print(byte2hex(cipherByte));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 重建密钥</div><div class="line">            ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;deskey.dat&quot;));</div><div class="line">            Key deskey2 = (Key)in.readObject();</div><div class="line">            in.close();</div><div class="line"></div><div class="line">            // 解密</div><div class="line">            c1 = Cipher.getInstance(Algorithm);</div><div class="line">            c1.init(Cipher.DECRYPT_MODE, deskey2);</div><div class="line">            byte[] decryptoByte = c1.doFinal(cipherByte);</div><div class="line">            System.out.println(&quot;摘要：&quot; + byte2hex(decryptoByte));</div><div class="line">            System.out.println(&quot;解密：&quot; + new String(decryptoByte));</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static String byte2hex(byte[] ba)&#123;</div><div class="line">        String strout = &quot;&quot;;</div><div class="line">        for(int i = 0; i &lt; ba.length; i++)&#123;</div><div class="line">            int j = ba[i] &lt; 0? ba[i] + 256 : ba[i];</div><div class="line">            String str = Integer.toHexString(j);</div><div class="line">            while(str.length() &lt; 2)</div><div class="line">                str = &apos;0&apos; + str;</div><div class="line">            if(i &lt; ba.length - 1)</div><div class="line">                strout += (str + &quot;-&quot;);</div><div class="line">            else</div><div class="line">                strout += str;</div><div class="line">        &#125;</div><div class="line">        return strout.toUpperCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Safe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vigenere 密码算法]]></title>
      <url>/2017/06/12/Vigenere-%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="Vigenere密码系统"><a href="#Vigenere密码系统" class="headerlink" title="Vigenere密码系统"></a>Vigenere密码系统</h3><p>多表代换密码系统的代表是Vigenere密码系统。Vigenere密码系统由法国密码学家Blaise de Vigenere于1858年提出的一种算法。</p>
<p>Java代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class Vigenere &#123;</div><div class="line">    private String zone;                                    // 明文和密文空间</div><div class="line">    private String keyword;                                 // 密钥单词</div><div class="line">    private List&lt;Integer&gt; key = new ArrayList&lt;&gt;();          // 密钥</div><div class="line">    private List&lt;String&gt; plainText = new ArrayList&lt;&gt;();     // 明文</div><div class="line">    private List&lt;String&gt; cipherText = new ArrayList&lt;&gt;();    // 密文</div><div class="line">    private List&lt;String&gt; decryptText = new ArrayList&lt;&gt;();   // 破解的密文</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 构造函数</div><div class="line">     * 初始化明文和密文空间</div><div class="line">     * 初始化密钥</div><div class="line">     * @param k</div><div class="line">     */</div><div class="line">    public Vigenere(String k)&#123;</div><div class="line">        StringBuffer sb = new StringBuffer();</div><div class="line">        for(int i = 0; i &lt;= 126; i++)&#123;</div><div class="line">            sb.append((char)i);</div><div class="line">        &#125;</div><div class="line">        this.zone = sb.toString();</div><div class="line"></div><div class="line">        this.keyword = (k == null)? &quot;computer&quot; : k;</div><div class="line">        for(int i = 0; i &lt; this.keyword.length(); i++)&#123;</div><div class="line">            this.key.add(new Integer(keyword.charAt(i)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从文件中读取明文</div><div class="line">     * @throws IOException</div><div class="line">     */</div><div class="line">    public void readPlainText() throws IOException &#123;</div><div class="line">        try (BufferedReader br = new BufferedReader(</div><div class="line">                new InputStreamReader(new FileInputStream(&quot;plaintext.txt&quot;))))&#123;</div><div class="line">            String line;</div><div class="line">            while((line = br.readLine()) != null)&#123;</div><div class="line">                this.plainText.add(line + &quot;\n&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将密文写入文件</div><div class="line">     */</div><div class="line">    public void writeCipherText()&#123;</div><div class="line">        try (PrintWriter pw = new PrintWriter(&quot;cipherText.txt&quot;))&#123;</div><div class="line">            for(String ct : this.cipherText)&#123;</div><div class="line">                pw.print(ct);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将破解后的密文写入文件</div><div class="line">     */</div><div class="line">    public void writeDecryptText()&#123;</div><div class="line">        try (PrintWriter pw = new PrintWriter(&quot;decryptText.txt&quot;))&#123;</div><div class="line">            for(String dt : this.decryptText)&#123;</div><div class="line">                pw.print(dt);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加密</div><div class="line">     */</div><div class="line">    protected void encrypt()&#123;</div><div class="line">        int cycle = this.key.size();</div><div class="line">        int totalLength = 0;</div><div class="line">        for(String pt : this.plainText)&#123;</div><div class="line">            StringBuffer ct = new StringBuffer();</div><div class="line">            for(int j = 0; j &lt; pt.length(); j++)&#123;</div><div class="line">                ct.append((char)((pt.charAt(j) + totalLength % cycle) % 256));</div><div class="line">                totalLength++;</div><div class="line">            &#125;</div><div class="line">            this.cipherText.add(ct.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 解密</div><div class="line">     */</div><div class="line">    public void decrypt()&#123;</div><div class="line">        int cycle = this.key.size();</div><div class="line">        int totalLength = 0;</div><div class="line">        for(String ct : this.cipherText)&#123;</div><div class="line">            StringBuffer dt = new StringBuffer();</div><div class="line">            for(int j = 0; j &lt; ct.length(); j++)&#123;</div><div class="line">                dt.append((char)((ct.charAt(j) - totalLength % cycle) % 256));</div><div class="line">                totalLength++;</div><div class="line">            &#125;</div><div class="line">            this.decryptText.add(dt.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">        Vigenere v = new Vigenere(null);</div><div class="line">        v.readPlainText();</div><div class="line">        v.encrypt();</div><div class="line">        v.writeCipherText();</div><div class="line">        v.decrypt();</div><div class="line">        v.writeDecryptText();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Safe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将本地项目推送到Github]]></title>
      <url>/2017/06/01/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<h4 id="初始化本地项目"><a href="#初始化本地项目" class="headerlink" title="初始化本地项目"></a>初始化本地项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd project</div><div class="line">git config --global user.name &quot;Jochen-M&quot;</div><div class="line">git config --global user.email &quot;Jochen_M@163.com&quot;</div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;init&quot;</div></pre></td></tr></table></figure>
<h4 id="提交到Github"><a href="#提交到Github" class="headerlink" title="提交到Github"></a>提交到Github</h4><p>首先在Github上新建仓库：</p>
<p><img src="/uploads/git-demo.png" alt="Alt text"></p>
<p>成功后可以按照红框内的提示连接本地版本库：</p>
<p><img src="/uploads/git-link.png" alt="Alt text"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/Jochen-M/git-demo.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs + Express + MongoDB快速搭建网站]]></title>
      <url>/2017/05/26/Nodejs-Express-MongoDB%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<h2 id="基本架构（前期准备）"><a href="#基本架构（前期准备）" class="headerlink" title="基本架构（前期准备）"></a>基本架构（前期准备）</h2><h3 id="后台："><a href="#后台：" class="headerlink" title="后台："></a>后台：</h3><ul>
<li>Node.js</li>
<li>Express框架(通过npm安装)</li>
<li>Moment.js——处理时间格式(通过npm安装)</li>
<li>mongoose——mongoDB数据库插件(通过npm安装)</li>
<li>underscore——mongoDB相关插件，可实现数据更新(通过npm安装)</li>
<li>cookie-parser——解析cookie(通过npm安装)</li>
<li>express-session——处理session(通过npm安装)</li>
<li>connect-mongo——用mongodb做会话的持久化(通过npm安装)</li>
<li>bcrypt——密码加密处理模块(通过npm安装)</li>
<li>morgan——logger调试模块(通过npm安装)</li>
</ul>
<h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><ul>
<li>mongoDB</li>
</ul>
<h3 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h3><ul>
<li>jade模板引擎(通过npm安装)</li>
<li>Bower(通过npm安装)</li>
<li>jQuery(通过Bower安装)</li>
<li>Bootstrap(通过Bower安装)</li>
</ul>
<hr>
<h2 id="项目流程（编码实现）："><a href="#项目流程（编码实现）：" class="headerlink" title="项目流程（编码实现）："></a>项目流程（编码实现）：</h2><h3 id="项目前后端流程打通"><a href="#项目前后端流程打通" class="headerlink" title="项目前后端流程打通"></a>项目前后端流程打通</h3><h4 id="Node入口文件分析"><a href="#Node入口文件分析" class="headerlink" title="Node入口文件分析"></a>Node入口文件分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">let port = 3000;</div><div class="line">let express = require(&apos;express&apos;);</div><div class="line">let app = express();</div><div class="line">let bodyParser = require(&apos;body-parser&apos;);  // 将表单数据格式化</div><div class="line">let path = require(&apos;path&apos;);               // 路径模块</div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123; extended: true&#125;));</div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));  // 静态资源路径</div><div class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);           // 视图模板引擎为jade</div><div class="line">app.set(&apos;views&apos;, &apos;./views/pages&apos;)         // 视图模板引擎路径</div><div class="line">app.locals.moment = require(&apos;moment&apos;);    // 时间格式化模块</div><div class="line"></div><div class="line">// index page</div><div class="line">app.get(&apos;/&apos;, function(req, res)&#123;</div><div class="line">  Movie.fetch(function(err, movies)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.render(&apos;index&apos;, &#123;   // index.jade</div><div class="line">      title: &apos;MovieGoGo 首页&apos;,</div><div class="line">      movies: movies</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(port);</div><div class="line">console.log(&apos;MovieGoGo is running at http://localhost:&apos; + port);</div></pre></td></tr></table></figure>
<h4 id="目录初始化："><a href="#目录初始化：" class="headerlink" title="目录初始化："></a>目录初始化：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">MovieGoGo/</div><div class="line">├── node_modules/         // nodejs依赖库</div><div class="line">├── public/               // 静态资源</div><div class="line">│   ├── images/           // 图片</div><div class="line">│   ├── js/               // 自定义js文件</div><div class="line">│   └── libs/</div><div class="line">│       ├── bootstrap/</div><div class="line">│       └── jquery/</div><div class="line">├── schemas               // 模式</div><div class="line">│   └── movie.js</div><div class="line">├── models                // 模型</div><div class="line">│   └── movie.js</div><div class="line">├── views                 // 视图</div><div class="line">│   ├── includes</div><div class="line">│   │   ├── header.jade</div><div class="line">│   │   └── head.jade</div><div class="line">│   ├── layout.jade</div><div class="line">│   └── pages</div><div class="line">│       ├── admin.jade</div><div class="line">│       ├── detail.jade</div><div class="line">│       ├── index.jade</div><div class="line">│       └── list.jade</div><div class="line">├── app.js                // 入口文件</div><div class="line">├── bower.json            // bower配置文件</div><div class="line">├── package.json          // nodejs配置文件</div><div class="line">└── README.md</div></pre></td></tr></table></figure>
<h4 id="创建jade视图及入口文件中处理"><a href="#创建jade视图及入口文件中处理" class="headerlink" title="创建jade视图及入口文件中处理"></a>创建jade视图及入口文件中处理</h4><p>head.jade:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.navbar.navbar-default.navbar-inverse</div><div class="line">  .container</div><div class="line">    navbar-header</div><div class="line">      a.navbar-brand(href=&quot;/&quot;) MovieGoGo</div><div class="line">      ul.nav.navbar-nav</div><div class="line">        li.dropdown</div><div class="line">          a(href=&quot;#&quot;, class=&quot;dropdown-toggle&quot;, data-toggle=&quot;dropdown&quot;, role=&quot;button&quot;, aria-haspopup=&quot;true&quot;, aria-expanded=&quot;false&quot;) Movie </div><div class="line">            span.caret</div><div class="line">          ul.dropdown-menu</div><div class="line">            li: a(href=&quot;/admin/movie/new&quot;) New</div><div class="line">            li: a(href=&quot;/admin/movie/list&quot;) List</div><div class="line">        li.dropdown</div><div class="line">          a(href=&quot;#&quot;, class=&quot;dropdown-toggle&quot;, data-toggle=&quot;dropdown&quot;, role=&quot;button&quot;, aria-haspopup=&quot;true&quot;, aria-expanded=&quot;false&quot;) Category </div><div class="line">            span.caret</div><div class="line">          ul.dropdown-menu</div><div class="line">            li: a(href=&quot;/admin/category/new&quot;) New</div><div class="line">            li: a(href=&quot;/admin/category/list&quot;) List</div><div class="line">        li.dropdown</div><div class="line">          a(href=&quot;#&quot;, class=&quot;dropdown-toggle&quot;, data-toggle=&quot;dropdown&quot;, role=&quot;button&quot;, aria-haspopup=&quot;true&quot;, aria-expanded=&quot;false&quot;) User </div><div class="line">            span.caret</div><div class="line">          ul.dropdown-menu</div><div class="line">            li: a(href=&quot;/signup&quot;) New</div><div class="line">            li: a(href=&quot;/admin/user/list&quot;) List</div></pre></td></tr></table></figure></p>
<p>header.jade<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">link(href=&quot;/libs/bootstrap/dist/css/bootstrap.min.css&quot;, rel=&quot;stylesheet&quot;)</div><div class="line">script(src=&quot;/libs/jquery/dist/jquery.min.js&quot;)</div><div class="line">script(src=&quot;/libs/bootstrap/dist/js/bootstrap.min.js&quot;)</div></pre></td></tr></table></figure></p>
<p>layout.jade:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">doctype</div><div class="line">html</div><div class="line">  head</div><div class="line">    meta(charset=&apos;utf-8&apos;)</div><div class="line">    title #&#123;title&#125;</div><div class="line">    include ./includes/head</div><div class="line">  body</div><div class="line">    include ./includes/header</div><div class="line">    block content</div></pre></td></tr></table></figure></p>
<p>index.jade：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">extends ../layout</div><div class="line">block content</div><div class="line">  .container</div><div class="line">    .row</div><div class="line">      for item in movies</div><div class="line">        .col-md-2</div><div class="line">          .thumbnail</div><div class="line">            a(href=&quot;/movie/#&#123;item._id&#125;&quot;)</div><div class="line">              img(src=&quot;#&#123;item.poster&#125;&quot;, alt=&quot;#&#123;item.title&#125;&quot;)</div><div class="line">            .caption</div><div class="line">              h3 #&#123;item.title&#125;</div><div class="line">              p: a.btn.btn-primary(href=&quot;/movie/#&#123;item._id&#125;&quot;, role=&quot;button&quot;)</div><div class="line">                观看预告片</div></pre></td></tr></table></figure></p>
<p>admin.jade：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">extends ../layout</div><div class="line">block content</div><div class="line">  .container</div><div class="line">    .row</div><div class="line">      form.form-horizontal(method=&quot;post&quot;, action=&quot;/admin/movie/new&quot;)</div><div class="line">        input(type=&quot;hidden&quot;, name=&quot;movie[_id]&quot;, value=&quot;#&#123;movie._id&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputTitle&quot;) 电影名字</div><div class="line">          .col-sm-8</div><div class="line">            input#inputTitle.form-control(type=&quot;text&quot;, name=&quot;movie[title]&quot;, value=&quot;#&#123;movie.title&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputDirector&quot;) 导演</div><div class="line">          .col-sm-8</div><div class="line">            input#inputDirector.form-control(type=&quot;text&quot;, name=&quot;movie[director]&quot;, value=&quot;#&#123;movie.director&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputCountry&quot;) 国家</div><div class="line">          .col-sm-8</div><div class="line">            input#inputCountry.form-control(type=&quot;text&quot;, name=&quot;movie[country]&quot;, value=&quot;#&#123;movie.country&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputLanguage&quot;) 语言</div><div class="line">          .col-sm-8</div><div class="line">            input#inputLanguage.form-control(type=&quot;text&quot;, name=&quot;movie[language]&quot;, value=&quot;#&#123;movie.language&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputPoster&quot;) 海报</div><div class="line">          .col-sm-8</div><div class="line">            input#inputPoster.form-control(type=&quot;text&quot;, name=&quot;movie[poster]&quot;, value=&quot;#&#123;movie.poster&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputFlash&quot;) 预告片</div><div class="line">          .col-sm-8</div><div class="line">            input#inputFlash.form-control(type=&quot;text&quot;, name=&quot;movie[flash]&quot;, value=&quot;#&#123;movie.flash&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputShowAt&quot;) 上映时间</div><div class="line">          .col-sm-8</div><div class="line">            input#inputShowAt.form-control(type=&quot;text&quot;, name=&quot;movie[showAt]&quot;, value=&quot;#&#123;movie.showAt&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          label.col-sm-2.control-label(for=&quot;inputSummary&quot;) 简介</div><div class="line">          .col-sm-8</div><div class="line">            input#inputSummary.form-control(type=&quot;text&quot;, name=&quot;movie[summary]&quot;, value=&quot;#&#123;movie.summary&#125;&quot;)</div><div class="line">        .form-group</div><div class="line">          .col-sm-6</div><div class="line">          button.btn.btn-default(type=&quot;submit&quot;) 录入</div></pre></td></tr></table></figure></p>
<p>detail.jade：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">extends ../layout</div><div class="line">block content</div><div class="line">  .container</div><div class="line">    .row</div><div class="line">      .col-md-7</div><div class="line">        img(src=&quot;#&#123;movie.poster&#125;&quot;, alt=&quot;#&#123;movie.title&#125;&quot;)</div><div class="line">        //- embed(src=&quot;#&#123;movie.flash&#125;&quot;, allowFullScreen=&quot;true&quot;, quality=&quot;high&quot;, width=&quot;720&quot;, height=&quot;600&quot;, align=&quot;middle&quot;, type=&quot;application/x-shockwave-flash&quot;)</div><div class="line">      .col-md-5</div><div class="line">        dl.dl-horizontal</div><div class="line">          dt 电影名字</div><div class="line">          dd #&#123;movie.title&#125;</div><div class="line">          dt 导演</div><div class="line">          dd #&#123;movie.director&#125;</div><div class="line">          dt 国家</div><div class="line">          dd #&#123;movie.country&#125;</div><div class="line">          dt 语言</div><div class="line">          dd #&#123;movie.language&#125;</div><div class="line">          dt 上映时间</div><div class="line">          dd #&#123;movie.showAt&#125;</div><div class="line">          dt 简介</div><div class="line">          dd #&#123;movie.summary&#125;</div></pre></td></tr></table></figure></p>
<p>list.jade：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">extends ../layout</div><div class="line">block content</div><div class="line">  .container</div><div class="line">    .row</div><div class="line">      table.table.table-hover.table-bordered</div><div class="line">        thead</div><div class="line">          tr</div><div class="line">            th 电影名字</div><div class="line">            th 导演</div><div class="line">            th 国家</div><div class="line">            th 语言</div><div class="line">            th 上映时间</div><div class="line">            th 录入时间</div><div class="line">            th 简介</div><div class="line">            th 查看</div><div class="line">            th 更新</div><div class="line">            th 删除</div><div class="line">        tbody</div><div class="line">          each item in movies</div><div class="line">            tr(class=&quot;item-id-#&#123;item._id&#125;&quot;)</div><div class="line">              td #&#123;item.title&#125;</div><div class="line">              td #&#123;item.director&#125;</div><div class="line">              td #&#123;item.country&#125;</div><div class="line">              td #&#123;item.language&#125;</div><div class="line">              td #&#123;item.showAt&#125;</div><div class="line">              td #&#123;moment(item.meta.createAt).format(&apos;MM/DD/YYYY HH:mm:SS&apos;)&#125;</div><div class="line">              td.col-sm-4 #&#123;item.summary&#125;</div><div class="line">              td: a.btn.btn-default(target=&quot;_blank&quot;, href=&quot;/movie/#&#123;item._id&#125;&quot;) 查看</div><div class="line">              td: a.btn.btn-success(target=&quot;_blank&quot;, href=&quot;/admin/update/#&#123;item._id&#125;&quot;) 更新</div><div class="line">              td</div><div class="line">                button.btn.btn-danger.del(type=&quot;button&quot;, data-id=&quot;#&#123;item._id&#125;&quot;) 删除</div><div class="line">  script(src=&quot;/js/admin.js&quot;)</div></pre></td></tr></table></figure></p>
<h4 id="伪造模板数据跑通前后端交互流程-略"><a href="#伪造模板数据跑通前后端交互流程-略" class="headerlink" title="伪造模板数据跑通前后端交互流程(略)"></a>伪造模板数据跑通前后端交互流程(略)</h4><h3 id="项目数据库实现"><a href="#项目数据库实现" class="headerlink" title="项目数据库实现"></a>项目数据库实现</h3><h4 id="mongodb模式模型设计及编码"><a href="#mongodb模式模型设计及编码" class="headerlink" title="mongodb模式模型设计及编码"></a>mongodb模式模型设计及编码</h4><p>schemas/movie.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">let mongoose = require(&apos;mongoose&apos;);</div><div class="line"></div><div class="line">let MovieSchema = new mongoose.Schema(&#123;</div><div class="line">  title: String,</div><div class="line">  director: String,</div><div class="line">  country: String,</div><div class="line">  language: String,</div><div class="line">  poster: String,</div><div class="line">  flash: String,</div><div class="line">  summary: String,</div><div class="line">  showAt: Number,</div><div class="line">  meta: &#123;</div><div class="line">    createAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now() </div><div class="line">    &#125;,</div><div class="line">    updateAt: &#123;</div><div class="line">      type: Date,</div><div class="line">      default: Date.now()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">MovieSchema.pre(&apos;save&apos;, function(next)&#123;</div><div class="line">  if(this.isNew)&#123;</div><div class="line">    this.meta.createAt = this.meta.updateAt = Date.now();</div><div class="line">  &#125;else&#123;</div><div class="line">    this.meta.updateAt = Date.now();</div><div class="line">  &#125;</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">MovieSchema.statics = &#123;</div><div class="line">  fetch: function(callback)&#123;</div><div class="line">    return this</div><div class="line">      .find(&#123;&#125;)</div><div class="line">      .sort(&apos;meta.updateAt&apos;)</div><div class="line">      .exec(callback);</div><div class="line">  &#125;,</div><div class="line">  findById: function(id, callback)&#123;</div><div class="line">    return this</div><div class="line">      .findOne(&#123;_id: id&#125;)</div><div class="line">      .exec(callback);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = MovieSchema</div></pre></td></tr></table></figure></p>
<p>models/movie.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let mongoose = require(&apos;mongoose&apos;);</div><div class="line">let MovieSchema = require(&apos;../schemas/movie&apos;);</div><div class="line">let Movie = mongoose.model(&apos;Movie&apos;, MovieSchema);</div><div class="line"></div><div class="line">module.exports = Movie</div></pre></td></tr></table></figure></p>
<h4 id="编写数据库交互代码"><a href="#编写数据库交互代码" class="headerlink" title="编写数据库交互代码"></a>编写数据库交互代码</h4><p>app.js文件中添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">let dbUrl = &apos;mongodb://127.0.0.1:27017/moviegogo&apos;;</div><div class="line"></div><div class="line">let mongoose = require(&apos;mongoose&apos;);</div><div class="line">let _ = require(&apos;underscore&apos;);</div><div class="line">let Movie = require(&apos;./models/movie&apos;);</div><div class="line"></div><div class="line">mongoose.Promise = global.Promise;</div><div class="line">mongoose.connect(dbUrl);</div><div class="line"></div><div class="line">// detail page</div><div class="line">app.get(&apos;/movie/:id&apos;, function(req, res)&#123;</div><div class="line">  let id = req.params.id;</div><div class="line"></div><div class="line">  Movie.findById(id, function(err, movie)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.render(&apos;detail&apos;, &#123;</div><div class="line">      title: &apos;MovieGoGo &apos; + movie.title,</div><div class="line">      movie: movie</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// admin new movie form page</div><div class="line">app.get(&apos;/admin/movie&apos;, function(req, res)&#123;</div><div class="line">  res.render(&apos;admin&apos;, &#123;</div><div class="line">    title: &apos;MovieGoGo 后台录入页&apos;,</div><div class="line">    movie: &#123;</div><div class="line">      title: &quot;&quot;,</div><div class="line">      director: &quot;&quot;,</div><div class="line">      country: &quot;&quot;,</div><div class="line">      language: &quot;&quot;,</div><div class="line">      poster: &quot;&quot;,</div><div class="line">      flash: &quot;&quot;,</div><div class="line">      showAt: &quot;&quot;,</div><div class="line">      summary: &quot;&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// admin new movie</div><div class="line">app.post(&apos;/admin/movie/new&apos;, function(req, res)&#123;</div><div class="line">  let id = req.body.movie._id;</div><div class="line">  let movieObj = req.body.movie;</div><div class="line">  let _movie;</div><div class="line"></div><div class="line">  if(id != &apos;undefined&apos;)&#123;</div><div class="line">    Movie.findById(id, function(err, movie)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      _movie = _.extend(movie, movieObj);</div><div class="line"></div><div class="line">      _movie.save(function(err)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">          console.log(err);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        res.redirect(&apos;/admin/list&apos;);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;else&#123;</div><div class="line">    _movie = new Movie(&#123;</div><div class="line">      title: movieObj.title,</div><div class="line">      director: movieObj.director,</div><div class="line">      country: movieObj.country,</div><div class="line">      language: movieObj.language,</div><div class="line">      poster: &apos;/images/sjbbb.jpg&apos;,  //movieObj.poster,</div><div class="line">      flash: movieObj.flash,</div><div class="line">      summary: movieObj.summary,</div><div class="line">      showAt: movieObj.showAt</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    _movie.save(function(err)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      res.redirect(&apos;/admin/list&apos;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// admin update movie</div><div class="line">app.get(&apos;/admin/update/:id&apos;, function(req, res)&#123;</div><div class="line">  let id = req.params.id;</div><div class="line"></div><div class="line">  if(id)&#123;</div><div class="line">    Movie.findById(id, function(err, movie)&#123;</div><div class="line">      res.render(&apos;admin&apos;, &#123;</div><div class="line">        title: &apos;imooc 后台更新页&apos;,</div><div class="line">        movie: movie</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// list page</div><div class="line">app.get(&apos;/admin/list&apos;, function(req, res)&#123;</div><div class="line">  Movie.fetch(function(err, movies)&#123;</div><div class="line">    if(err)&#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.render(&apos;list&apos;, &#123;</div><div class="line">      title: &apos;MovieGoGo 列表页&apos;,</div><div class="line">      movies: movies</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="删除功能及项目生成配置文件"><a href="#删除功能及项目生成配置文件" class="headerlink" title="删除功能及项目生成配置文件"></a>删除功能及项目生成配置文件</h3><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p>app.js文件中添加代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// admin delete page</div><div class="line">app.delete(&apos;/admin/delete&apos;, function(req, res)&#123;</div><div class="line">  let id = req.query.id;</div><div class="line"></div><div class="line">  if(id)&#123;</div><div class="line">    Movie.remove(&#123;_id: id&#125;, function(err)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;else&#123;</div><div class="line">        res.json(&#123;success: 1&#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>新建public/js/admin.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">  $(&apos;.del&apos;).click(function(e)&#123;</div><div class="line">    let target = $(e.target);</div><div class="line">    let id = target.data(&apos;id&apos;);</div><div class="line">    let tr = $(&apos;.item-id-&apos; + id);</div><div class="line"></div><div class="line">    $.ajax(&#123;</div><div class="line">      type: &apos;DELETE&apos;,</div><div class="line">      url: &apos;/admin/delete?id=&apos; + id</div><div class="line">    &#125;).done(function(results)&#123;</div><div class="line">      if(results.success === 1)&#123;</div><div class="line">        if(tr.length &gt; 0)&#123;</div><div class="line">          tr.remove();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="生成项目配置文件"><a href="#生成项目配置文件" class="headerlink" title="生成项目配置文件"></a>生成项目配置文件</h4><p>使用<code>bower init</code>和<code>cnpm init</code>生成配置文件。</p>
<hr>
<h2 id="注意事项及技巧"><a href="#注意事项及技巧" class="headerlink" title="注意事项及技巧"></a>注意事项及技巧</h2><p>1）使用bower安装依赖的库和文件时，应事先在项目根目录建立.bowerrc文件，并在文件中添加配置信息，表示库和文件的安装目录：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;directory&quot;: &quot;public/libs&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2）安装相关模块时，使用<code>–save</code>参数，自动将配置信息写入配置文件（如：cnpm install cookie-parser –save)</p>
<h2 id="项目具体源代码："><a href="#项目具体源代码：" class="headerlink" title="项目具体源代码："></a>项目具体源代码：</h2><p>Github: <a href="https://github.com/Jochen-M/MovieGoGo.git" target="_blank" rel="external">https://github.com/Jochen-M/MovieGoGo.git</a></p>
<blockquote>
<p>后续内容参看<a href="https://jochen-m.github.io/2017/06/15/Nodejs-Express-MongoDB快速搭建网站-进阶/">《Nodejs-Express-MongoDB快速搭建网站(进阶)》</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop大数据平台架构与实践]]></title>
      <url>/2017/05/19/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h3 id="什么是Apache-Hadoop？"><a href="#什么是Apache-Hadoop？" class="headerlink" title="什么是Apache Hadoop？"></a>什么是Apache Hadoop？</h3><h4 id="定义和特性"><a href="#定义和特性" class="headerlink" title="定义和特性"></a>定义和特性</h4><ul>
<li>可靠的、可扩展的、分布式计算开源软件。</li>
<li>Apache Hadoop软件库是一个框架，允许使用简单的编程模型，在计算机集群分布式地处理大型数据集。</li>
<li>它可以从单个服务器扩展到数千台机器，每个机器都提供本地计算和存储。</li>
<li>每一台计算机都容易出现故障，库本身的目的是检测和处理应用层的故障，因此在一组计算机上提供高可用性服务，而不是依靠硬件来提供高可用性。</li>
</ul>
<h4 id="主要模块："><a href="#主要模块：" class="headerlink" title="主要模块："></a>主要模块：</h4><ul>
<li>Hadoop Distributed File System(HDFS): 一个分布式文件系统，它提供对应用程序数据的高吞吐量访问。</li>
<li>Hadoop YARN: 作业调度和集群资源管理的框架。</li>
<li>Hadoop MapReduce: 基于YARN的大型数据集并行处理系统。</li>
</ul>
<h3 id="Hadoop安装（以hadoop-1-2-1为例）"><a href="#Hadoop安装（以hadoop-1-2-1为例）" class="headerlink" title="Hadoop安装（以hadoop-1.2.1为例）"></a>Hadoop安装（以hadoop-1.2.1为例）</h3><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul>
<li>Linux操作系统</li>
<li>安装JDK以及配置相关环境变量</li>
<li>下载Hadoop安装包，如：hadoop-1.2.1.tar.gz（官网下载地址：<a href="http://hadoop.apache.org/releases.html" target="_blank" rel="external">http://hadoop.apache.org/releases.html</a>）</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>将hadoop-1.2.1.tar.gz解压到指定目录，如：/opt/hadoop-1.2.1/</p>
<h4 id="配置hadoop环境变量"><a href="#配置hadoop环境变量" class="headerlink" title="配置hadoop环境变量"></a>配置hadoop环境变量</h4><p>在/etc/profile中配置如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/opt/jdk1.8.0_131</div><div class="line">export JRE_HOME=/opt/jdk1.8.0_131/jre</div><div class="line">export HADOOP_HOME=/opt/hadoop-1.2.1</div><div class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/Lib</div><div class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$HADOOP_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<h4 id="修改四个配置文件"><a href="#修改四个配置文件" class="headerlink" title="修改四个配置文件"></a>修改四个配置文件</h4><p>这四个配置文件均在/opt/hadoop-1.2.1/conf/目录下。</p>
<ul>
<li>(a)修改hadoop-env.sh,设置JAVA_HOME:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># The java implementation to use.  Required.</div><div class="line">export JAVA_HOME=/opt/jdk1.8.0_131</div></pre></td></tr></table></figure>
<ul>
<li>(b)修改core-site.xml,设置hadoop.tmp.dir,dfs.name.dir,fs.default.name:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;     &lt;!-- hadoop临时工作目录 --&gt;</div><div class="line">    &lt;value&gt;/home/jochen/hadoop&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line"></div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;dfs.name.dir&lt;/name&gt;       &lt;!-- hadoop源数据目录 --&gt;</div><div class="line">    &lt;value&gt;/home/jochen/hadoop/name&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line"></div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;fs.default.name&lt;/name&gt;    &lt;!-- 文件系统namenode =&gt; 地址：端口号 --&gt;</div><div class="line">    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<ul>
<li>(c)修改mapred-site.xml,设置mapred.job.tracker:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;mapred.job.tracker&lt;/name&gt;</div><div class="line">    &lt;value&gt;localhost:9001&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<ul>
<li>(d)修改hdfs-site.xml,设置dfs.data.dir:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;dfs.data.dir&lt;/name&gt;       &lt;!-- dfs文件块存放目录 --&gt;</div><div class="line">    &lt;value&gt;/home/jochen/hadoop/data&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hadoop namenode -format</div></pre></td></tr></table></figure></p>
<p>正确执行的结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Warning: $HADOOP_HOME is deprecated.</div><div class="line"></div><div class="line">17/05/19 23:46:05 INFO namenode.NameNode: STARTUP_MSG:</div><div class="line">/************************************************************</div><div class="line">STARTUP_MSG: Starting NameNode</div><div class="line">STARTUP_MSG:   host = ubuntu/127.0.0.1</div><div class="line">STARTUP_MSG:   args = [-format]</div><div class="line">STARTUP_MSG:   version = 1.2.1</div><div class="line">STARTUP_MSG:   build = https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1.2 -r 1503152; compiled by &apos;mattf&apos; on Mon Jul 22 15:23:09 PDT 2013</div><div class="line">STARTUP_MSG:   java = 1.8.0_131</div><div class="line">************************************************************/</div><div class="line">17/05/19 23:46:05 INFO util.GSet: Computing capacity for map BlocksMap</div><div class="line">17/05/19 23:46:05 INFO util.GSet: VM type       = 64-bit</div><div class="line">17/05/19 23:46:05 INFO util.GSet: 2.0% max memory = 932184064</div><div class="line">17/05/19 23:46:05 INFO util.GSet: capacity      = 2^21 = 2097152 entries</div><div class="line">17/05/19 23:46:05 INFO util.GSet: recommended=2097152, actual=2097152</div><div class="line">17/05/19 23:46:05 INFO namenode.FSNamesystem: fsOwner=jochen</div><div class="line">17/05/19 23:46:05 INFO namenode.FSNamesystem: supergroup=supergroup</div><div class="line">17/05/19 23:46:05 INFO namenode.FSNamesystem: isPermissionEnabled=true</div><div class="line">17/05/19 23:46:05 INFO namenode.FSNamesystem: dfs.block.invalidate.limit=100</div><div class="line">17/05/19 23:46:05 INFO namenode.FSNamesystem: isAccessTokenEnabled=false accessKeyUpdateInterval=0 min(s), accessTokenLifetime=0 min(s)</div><div class="line">17/05/19 23:46:05 INFO namenode.FSEditLog: dfs.namenode.edits.toleration.length = 0</div><div class="line">17/05/19 23:46:05 INFO namenode.NameNode: Caching file names occuring more than 10 times</div><div class="line">17/05/19 23:46:05 INFO common.Storage: Image file /home/jochen/hadoop/dfs/name/current/fsimage of size 112 bytes saved in 0 seconds.</div><div class="line">17/05/19 23:46:06 INFO namenode.FSEditLog: closing edit log: position=4, editlog=/home/jochen/hadoop/dfs/name/current/edits</div><div class="line">17/05/19 23:46:06 INFO namenode.FSEditLog: close success: truncate to 4, editlog=/home/jochen/hadoop/dfs/name/current/edits</div><div class="line">17/05/19 23:46:06 INFO common.Storage: Storage directory /home/jochen/hadoop/dfs/name has been successfully formatted.</div><div class="line">17/05/19 23:46:06 INFO namenode.NameNode: SHUTDOWN_MSG:</div><div class="line">/************************************************************</div><div class="line">SHUTDOWN_MSG: Shutting down NameNode at ubuntu/127.0.0.1</div><div class="line">************************************************************/</div></pre></td></tr></table></figure></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /opt/hadoop-1.2.1/bin</div><div class="line">$ ./start-all.sh</div></pre></td></tr></table></figure>
<h4 id="查看当前运行的java进程"><a href="#查看当前运行的java进程" class="headerlink" title="查看当前运行的java进程"></a>查看当前运行的java进程</h4><p>在Terminal输入命令，出现如下结果表示hadoop安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ jps</div><div class="line">12785 JobTracker</div><div class="line">1161 Jps</div><div class="line">23626 TaskTracker</div><div class="line">23275 DataNode</div><div class="line">21659 NameNode</div><div class="line">23436 SecondaryNameNode</div></pre></td></tr></table></figure></p>
<h3 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h3><h4 id="HDFS基本概念"><a href="#HDFS基本概念" class="headerlink" title="HDFS基本概念"></a>HDFS基本概念</h4><h5 id="HDFS设计架构"><a href="#HDFS设计架构" class="headerlink" title="HDFS设计架构"></a>HDFS设计架构</h5><p><img src="/uploads/hdfs_block_namenode_datanode.png" alt="Alt text"></p>
<ul>
<li>块（Block）：<ul>
<li>HDFS的文件被分成块进行存储</li>
<li>HDFS块的默认大小为64MB</li>
<li>块是文件存储处理的逻辑单元</li>
</ul>
</li>
<li>管理节点（NameNode），存放文件元数据：<ul>
<li>文件与数据块的映射表</li>
<li>数据块与数据节点的映射表</li>
</ul>
</li>
<li>DataNode：<ul>
<li>DataNode是HDFS的工作节点</li>
<li>存放数据块</li>
</ul>
</li>
</ul>
<h4 id="数据管理策略与容错"><a href="#数据管理策略与容错" class="headerlink" title="数据管理策略与容错"></a>数据管理策略与容错</h4><ul>
<li>数据块副本：每个数据块至少3个副本，分布在两个机架内的多个节点</li>
<li>心跳检测：DataNode定期向NameNode发送心跳消息<br><img src="/uploads/beat_information.png" alt="Alt text"></li>
<li>二级NameNode：二级NameNode定期同步元数据映像文件和修改日志，NameNode发生故障时，二级NameNode替换为主NameNode<br><img src="/uploads/secondary_namenode.png" alt="Alt text"></li>
</ul>
<h4 id="HDFS中文件的读写操作"><a href="#HDFS中文件的读写操作" class="headerlink" title="HDFS中文件的读写操作"></a>HDFS中文件的读写操作</h4><h5 id="HDFS读取文件的流程"><a href="#HDFS读取文件的流程" class="headerlink" title="HDFS读取文件的流程"></a>HDFS读取文件的流程</h5><p><img src="/uploads/hdfs_readfile.png" alt="Alt text"></p>
<h5 id="HDFS写入文件的流程"><a href="#HDFS写入文件的流程" class="headerlink" title="HDFS写入文件的流程"></a>HDFS写入文件的流程</h5><p><img src="/uploads/hdfs_writefile.png" alt="Alt text"></p>
<h4 id="HDFS的特点"><a href="#HDFS的特点" class="headerlink" title="HDFS的特点"></a>HDFS的特点</h4><ul>
<li>数据冗余，硬件容错</li>
<li>流式的数据访问（一次写入、多次读取）</li>
<li>适合存储大文件</li>
<li>适用性和局限性<ul>
<li>适合数据批量读写，吞吐量高</li>
<li>不适合交互式应用，低延迟很难满足</li>
<li>适合一次写入多次读取，顺序读写</li>
<li>不支持多用户并发写相同文件</li>
</ul>
</li>
</ul>
<h4 id="HDFS使用"><a href="#HDFS使用" class="headerlink" title="HDFS使用"></a>HDFS使用</h4><p>HDFS命令行操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hadoop fs -ls dirpath           // 列出某目录下的文件和目录</div><div class="line">hadoop fs -mkdir dirname        // 在HDFS中新建目录</div><div class="line">hadoop fs -put filepath dirpath // 将本地文件上传到HDFS</div><div class="line">hadoop fs -get filepath dirpath // 从HDFS下载文件到本地</div><div class="line">hadoop fs -cat filepath         // 查看文件内容</div><div class="line">hadoop dfsadmin -report         // 查看HDFS信息</div></pre></td></tr></table></figure></p>
<h3 id="MapReduce简介"><a href="#MapReduce简介" class="headerlink" title="MapReduce简介"></a>MapReduce简介</h3><h4 id="MapReduce的原理"><a href="#MapReduce的原理" class="headerlink" title="MapReduce的原理"></a>MapReduce的原理</h4><p>分而治之，一个大任务分成多个小的子任务（map），并行执行后，合并结果（reduce）<br><img src="/uploads/map_reduce.png" alt="Alt text"></p>
<h4 id="MapReduce的运行流程"><a href="#MapReduce的运行流程" class="headerlink" title="MapReduce的运行流程"></a>MapReduce的运行流程</h4><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ul>
<li>Job(作业) &amp; Task(任务)<br>一个Job可以分成多个Task（MapTask &amp; ReduceTask）</li>
<li>JobTracker（作业管理节点）<br>客户端提交Job，JobTracker将其放入候选队列中，在适当的时候进行调度，将Job拆分成多个MapTask和ReduceTask，分发给TaskTracker执行。JobTracker的角色：<ul>
<li>作业调度</li>
<li>分配任务、监控任务执行进度</li>
<li>监控TaskTracker的状态</li>
</ul>
</li>
<li>TaskTracker（任务管理节点）<br>通常TaskTracker和HDFS的DataNode属于同一组物理节点，实现了移动计算代替移动数据，保证读取数据开销最小。TaskTracker的角色：<ul>
<li>执行任务</li>
<li>汇报任务状态</li>
</ul>
</li>
</ul>
<h5 id="MapReduce的体系结构"><a href="#MapReduce的体系结构" class="headerlink" title="MapReduce的体系结构"></a>MapReduce的体系结构</h5><p><img src="/uploads/map_reduce_structure.png" alt="Alt text"></p>
<h5 id="MapReduce作业执行过程"><a href="#MapReduce作业执行过程" class="headerlink" title="MapReduce作业执行过程"></a>MapReduce作业执行过程</h5><p><img src="/uploads/map_reduce_job_execution.png" alt="Alt text"></p>
<h5 id="MapReduce的容错机制"><a href="#MapReduce的容错机制" class="headerlink" title="MapReduce的容错机制"></a>MapReduce的容错机制</h5><ul>
<li>重复执行<br>默认为最多4次后放弃</li>
<li>推测执行<br>原因：所有Map端运算完成，才开始执行Reduce端。<br>作用：保证整个任务的计算，不会因为某一两个TaskTracker的故障，导致整个任务执行效率很低。</li>
</ul>
<h3 id="YARN-Hadoop-资源管理器"><a href="#YARN-Hadoop-资源管理器" class="headerlink" title="YARN - Hadoop 资源管理器"></a>YARN - Hadoop 资源管理器</h3><ul>
<li>YARN的基本思想是将资源管理和作业调度/监控的功能拆分到不同的守护进程。这种思想需要有一个全局的资源管理器（RM）和（每个应用程序都要有的）应用程序管理器（AM）。</li>
<li>资源管理器（RM）和节点管理器（NodeManager）形成了数据计算框架。资源管理器（RM）是在系统中所有应用程序间仲裁资源的最终权威。节点管理器（NodeManager）是每台机器的框架代理，负责容器的管理，监控他们的资源使用情况(cpu、内存、磁盘、网络)，并向资源管理器（RM）/调度器报告该情况。</li>
<li>每个应用程序的应用程序管理器（AM）实际上是一个特定的框架的库，它的任务是与资源管理器（RM）协商资源，并与节点管理器（NodeManager）一起工作来执行和监视任务。</li>
<li>资源管理器（RM）有两个主要组件:调度程序和应用程序管理器（AM）。<ul>
<li>调度程序负责将资源分配给各种运行的应用程序。调度程序是纯粹的调度器，因为它不执行应用程序的状态监视或跟踪。另外，它也不能保证重新启动失败的任务，无论是由于应用程序失败还是硬件故障。</li>
<li>应用程序管理器（AM）负责接收提交的工作，协商执行应用程序的第一个容器，并并提供在失败时重新启动应用程序管理器(AM)容器的服务。每个应用程序管理器(AM)负责从调度程序中协商适当的资源容器，跟踪它们的状态并监视进程。</li>
</ul>
</li>
<li>YARN 还支持资源预定的概念，保留资源以确保重要工作的可预见性执行。预订系统会对资源进行跟踪，对预订进行控制，并动态地指导底层的调度程序，以确保预订是满的。</li>
</ul>
<p><img src="/uploads/hadoop_yarn.png" alt="Alt text"></p>
<blockquote>
<p>Hadoop官网：<a href="http://hadoop.apache.org" target="_blank" rel="external">http://hadoop.apache.org</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Big Data </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs的使用技巧]]></title>
      <url>/2017/05/16/Nodejs%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一、node.js升级到最新版本<br>二、使用nvm管理node版本<br>三、几个npm的常用命令<br>四、使用淘宝 NPM 镜像</p>
</blockquote>
<a id="more"></a>
<h4 id="一、node-js升级到最新版本"><a href="#一、node-js升级到最新版本" class="headerlink" title="一、node.js升级到最新版本"></a>一、node.js升级到最新版本</h4><p>node有一个模块叫n，是专门用来管理node.js的版本的。<br>首先安装n模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g n</div></pre></td></tr></table></figure></p>
<p>第二步：<br>升级node.js到最新稳定版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n stable</div></pre></td></tr></table></figure></p>
<h4 id="二、使用nvm管理node版本"><a href="#二、使用nvm管理node版本" class="headerlink" title="二、使用nvm管理node版本"></a>二、使用nvm管理node版本</h4><p>linux 安装 nvm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash</div></pre></td></tr></table></figure></p>
<p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>安装node<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install stable #安装最新稳定版</div></pre></td></tr></table></figure></p>
<p><em>额外说明</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nvm install stable #安装最新稳定版 node </div><div class="line">nvm install 4.2.2 #安装 4.2.2 版本 </div><div class="line">nvm install 0.12.7 #安装 0.12.7 版本</div><div class="line">nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7</div></pre></td></tr></table></figure></p>
<p><em>nvm切换版本</em><br>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd &lt;项目根目录&gt;  #进入项目根目录</div><div class="line">echo 4 &gt; .nvmrc #添加 .nvmrc 文件</div><div class="line">nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</div><div class="line">node -v #查看 node 是否切换为对应版本</div></pre></td></tr></table></figure></p>
<h4 id="三、几个npm的常用命令"><a href="#三、几个npm的常用命令" class="headerlink" title="三、几个npm的常用命令"></a>三、几个npm的常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm -v          #显示版本，检查npm 是否正确安装。</div><div class="line">npm install express   #安装express模块</div><div class="line">npm install -g express  #全局安装express模块</div><div class="line">npm list         #列出已安装模块</div><div class="line">npm show express     #显示模块详情</div><div class="line">npm update        #升级当前目录下的项目的所有模块</div><div class="line">npm update express    #升级当前目录下的项目的指定模块</div><div class="line">npm update -g express  #升级全局安装的express模块</div><div class="line">npm uninstall express  #删除指定的模块</div></pre></td></tr></table></figure>
<h4 id="四、使用淘宝-NPM-镜像"><a href="#四、使用淘宝-NPM-镜像" class="headerlink" title="四、使用淘宝 NPM 镜像"></a>四、使用淘宝 NPM 镜像</h4><p>国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。<br>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟一次以保证尽量与官方服务同步。<br>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>这样就可以使用 cnpm 命令来安装模块了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install [name]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flink学习笔记]]></title>
      <url>/2017/05/14/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>Apache Flink is an open source platform for distributed stream and batch data processing. Flink’s core is a streaming dataflow engine that provides data distribution, communication, and fault tolerance for distributed computations over data streams. Flink also builds batch processing on top of the streaming engine, overlaying native iteration support, managed memory, and program optimization.</p>
<a id="more"></a>
<h4 id="Building-Flink-from-Source"><a href="#Building-Flink-from-Source" class="headerlink" title="Building Flink from Source"></a>Building Flink from Source</h4><p>To clone from git, enter:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/apache/flink</div></pre></td></tr></table></figure></p>
<p>The simplest way of building Flink is by running<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 1)For maven 3.0.x, 3.1.x, and 3.2.x</div><div class="line">//   In the root directory of Flink code base:</div><div class="line">mvn clean install -DskipTests</div><div class="line"></div><div class="line">// 2)For maven 3.3.x</div><div class="line">//   The build has to be done in two steps:</div><div class="line">//   First in the base directory, then in the distribution project</div><div class="line">mvn clean install -DskipTests</div><div class="line">cd flink-dist</div><div class="line">mvn clean install</div></pre></td></tr></table></figure></p>
<p><em>Note:</em> To check your Maven version, run <code>mvn –version</code>.</p>
<h4 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate                               \</div><div class="line">    -DarchetypeGroupId=org.apache.flink              \</div><div class="line">    -DarchetypeArtifactId=flink-quickstart-java      \</div><div class="line">    -DarchetypeVersion=1.4-SNAPSHOT</div></pre></td></tr></table></figure>
<p>This allows you to name your newly created project. It will interactively ask you for the groupId, artifactId, and package name.</p>
<h4 id="Build-Project"><a href="#Build-Project" class="headerlink" title="Build Project"></a>Build Project</h4><p>Go to your project directory and enter the command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean install -Pbuild-jar</div></pre></td></tr></table></figure></p>
<p>You will find a jar that runs on every Flink cluster with a compatible version, target/original-your-artifact-id-your-version.jar. There is also a fat-jar in target/your-artifact-id-your-version.jar which, additionally, contains all dependencies that were added to the Maven project.</p>
]]></content>
      
        <categories>
            
            <category> Big Data </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Flink </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解]]></title>
      <url>/2017/05/07/Java%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java提供了一种原程序中的元素关联任何信息和任何元数据的途径和方法。</p>
<h2 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h2><h3 id="按照运行机制分"><a href="#按照运行机制分" class="headerlink" title="按照运行机制分"></a>按照运行机制分</h3><p><em>源码注解：</em>注解只在源码中存在，编译成.class文件就不存在了。<br><em>编译时注解：</em>注解在源码和.class文件中都存在。（ JDK自带注解）<br><em>运行时注解：</em>在运行阶段还起作用，甚至会影响运行逻辑。（@Autowired）</p>
<a id="more"></a>
<h3 id="按照来源分"><a href="#按照来源分" class="headerlink" title="按照来源分"></a>按照来源分</h3><h4 id="JDK自带注解"><a href="#JDK自带注解" class="headerlink" title="JDK自带注解"></a>JDK自带注解</h4><p>@Override    覆盖父类的方法<br>@Deprecated    过时的方法<br>@SuppressWarnings    抑制警告。如：@SuppressWarnings(“deprecation”)</p>
<h4 id="Java第三方注解"><a href="#Java第三方注解" class="headerlink" title="Java第三方注解"></a>Java第三方注解</h4><p><em>Spring：</em><br>@Autowired<br>@Service<br>@Repository<br><em>Mybatis:</em><br>@InsertProvider<br>@UpdateProvider<br>@Options</p>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><h3 id="元注解：注解的注解"><a href="#元注解：注解的注解" class="headerlink" title="元注解：注解的注解"></a>元注解：注解的注解</h3><h2 id="自定义注解-1"><a href="#自定义注解-1" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="自定义注解的语法要求"><a href="#自定义注解的语法要求" class="headerlink" title="自定义注解的语法要求"></a>自定义注解的语法要求</h3><p>1) 使用@interface关键字定义注解；<br>2) 成员以无参无异常方式声明；<br>3) 可以用default为成员指定一个默认值；<br>4) 成员类型是受限的，合法的类型包括原始类型及String,Class,Annotation,Enumeration；<br>5) 如果注解只有一个成员，则成员名必须为value()，在使用时可以忽略成员名和赋值号(=)；<br>6) 注解类可以没有成员，没有成员的注解称为标识注解。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Inherited</div><div class="line">@Documented</div><div class="line">public @interface Description&#123;</div><div class="line">    String desc();</div><div class="line">    String author();</div><div class="line">    int age() default 18;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Inherited</div><div class="line">@Documented</div><div class="line">public @interface Description&#123;</div><div class="line">    String value();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>说明：</em><br>@Target —— 注解的作用域：</p>
<ul>
<li>CONSTRUCTOR 构造方法声明</li>
<li>FIELD 字段声明</li>
<li>LOCAL_VARIABLE 局部变量声明</li>
<li>METHOD 方法声明</li>
<li>PACKAGE 包声明</li>
<li>PARAMETER 参数声明</li>
<li>TYPE 类/接口</li>
</ul>
<p>@Retention —— 生命周期：</p>
<ul>
<li>SOURCE 只在源码显示，编译时会丢弃</li>
<li>CLASS 编译时会记录到class中，运行时忽略</li>
<li>RUNTIME 运行时存在，可以通过反射读取</li>
</ul>
<p>@Inherited —— 允许子类继承<br>@Documented —— 生成javadoc时会包含该注解</p>
<h3 id="使用自定义注解"><a href="#使用自定义注解" class="headerlink" title="使用自定义注解"></a>使用自定义注解</h3><p>语法说明：<br>@&lt;注解名&gt;(&lt;成员名1&gt; = &lt;成员值1&gt;， &lt;成员名2&gt; = &lt;成员值2&gt;,…)<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Description(&quot;I am class annotation&quot;)</div><div class="line">public class Person&#123;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    @Description(&quot;I am method annotation&quot;)</div><div class="line">    public String getName()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h3><p>通过反射获取类、函数或成员上的运行时注解信息，从而实现动态控制程序运行的逻辑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.lang.annotation.Annotation;</div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">public class ParseAnn &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        // 1.使用类加载器加载类</div><div class="line">        try&#123;</div><div class="line">            Class c = Class.forName(&quot;com.example.annotation.Person&quot;);</div><div class="line">            // 2.找到类上的注解</div><div class="line">            boolean isExist = c.isAnnotationPresent(Description.class);</div><div class="line">            if(isExist)&#123;</div><div class="line">                // 3.拿到注解实例</div><div class="line">                Description d = (Description)c.getAnnotation(Description.class);</div><div class="line">                System.out.println(d.value());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 4.1 找到方法上的注解</div><div class="line">            Method[] ms = c.getMethods();</div><div class="line">            for(Method m : ms)&#123;</div><div class="line">                boolean isMExist = m.isAnnotationPresent(Description.class);</div><div class="line">                if(isMExist)&#123;</div><div class="line">                    Description d = (Description)m.getAnnotation(Description.class);</div><div class="line">                    System.out.println(d.value());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 4.2 另外一种解析方式</div><div class="line">            for(Method m : ms)&#123;</div><div class="line">                Annotation[] as = m.getAnnotations();</div><div class="line">                for(Annotation a : as)&#123;</div><div class="line">                    if(a instanceof Description)&#123;</div><div class="line">                        Description d = (Description)a;</div><div class="line">                        System.out.println(d.value());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 运行结果：</div><div class="line">I am class annotation</div><div class="line">I am method annotation</div><div class="line">I am method annotation</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel网站部署]]></title>
      <url>/2017/05/06/Laravel%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="在Ubuntu中搭建Linux-Nginx-Mysql-PHP环境"><a href="#在Ubuntu中搭建Linux-Nginx-Mysql-PHP环境" class="headerlink" title="在Ubuntu中搭建Linux+Nginx+Mysql+PHP环境"></a>在Ubuntu中搭建Linux+Nginx+Mysql+PHP环境</h2><h3 id="首先，通过下面的命令来删除Apache"><a href="#首先，通过下面的命令来删除Apache" class="headerlink" title="首先，通过下面的命令来删除Apache"></a>首先，通过下面的命令来删除Apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 stop</div><div class="line">update-rc.d -f apache2 remove</div><div class="line">sudo apt-get remove apache2</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>删除完之后，更新一下包列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<h3 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure>
<p>安装完Nginx，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx start</div></pre></td></tr></table></figure></p>
<p>再在浏览器地址栏输入公网IP，就可以看到welcome to Nginx的界面了</p>
<h3 id="2-安装Mysql"><a href="#2-安装Mysql" class="headerlink" title="2.安装Mysql"></a>2.安装Mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>
<p>过程中会提示你设置Mysql的密码，就跟平时的密码设置一样，一<br>次输入，一次确认。密码确认完毕后基本等一会就安装好了。尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p>
<p>如果登录成功，那Mysql就正确安装了。</p>
<h3 id="3-安装PHP"><a href="#3-安装PHP" class="headerlink" title="3.安装PHP"></a>3.安装PHP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install php5-fpm php5-cli php5-mcrypt</div></pre></td></tr></table></figure>
<p>只有通过php5-fpm，PHP在Nginx下才能正常运行，遂，安装之。<br>至于php5-mcrypt，有些PHP框架会依赖于这个，比如Laravel就是，所以也把它装上了。</p>
<h3 id="4-配置PHP"><a href="#4-配置PHP" class="headerlink" title="4.配置PHP"></a>4.配置PHP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/php5/fpm/php.ini</div></pre></td></tr></table></figure>
<p>打开PHP配置文件，找到cgi.fix_pathinfo选项，去掉它前面的注释分号;，然后将它的值设置为0,如下:<br>cgi.fix_pathinfo=0</p>
<h3 id="5-启用php5-mcrypt"><a href="#5-启用php5-mcrypt" class="headerlink" title="5.启用php5-mcrypt:"></a>5.启用php5-mcrypt:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php5enmod mcrypt</div></pre></td></tr></table></figure>
<h3 id="6-重启php5-fpm"><a href="#6-重启php5-fpm" class="headerlink" title="6.重启php5-fpm:"></a>6.重启php5-fpm:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service php5-fpm restart</div></pre></td></tr></table></figure>
<p>在搭建完LEMP环境之后，首先要明确两个重要目录:</p>
<blockquote>
<p>Nginx的默认root文件夹<br>/usr/share/nginx/html</p>
<p>Nginx的服务器配置文件所在目录<br>/etc/nginx/sites-available/</p>
</blockquote>
<h2 id="部署Laravel"><a href="#部署Laravel" class="headerlink" title="部署Laravel"></a>部署Laravel</h2><h3 id="1-创建网站的根目录"><a href="#1-创建网站的根目录" class="headerlink" title="1.创建网站的根目录"></a>1.创建网站的根目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /var/www</div></pre></td></tr></table></figure>
<h3 id="2-配置nginx服务器"><a href="#2-配置nginx服务器" class="headerlink" title="2.配置nginx服务器"></a>2.配置nginx服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>
<p>打开nginx的配置文件之后，找到server这一块，大概是长这个样子的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80 default_server;</div><div class="line">        listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">        root /usr/share/nginx/html;</div><div class="line">        index index.html index.htm;</div><div class="line"></div><div class="line">        server_name localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">                try_files $uri $uri/ =404;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中root，index ，server_name和location这几行需要稍微修改一下:</p>
<p>root修改</p>
<p>root /var/www/laravel/public;<br>这里就是将nginx服务器的根目录指向Laravel的public文件夹下，后续的Laravel项目的代码我们会放在我们之前创建的/var/www/laravel目录下</p>
<p>index修改</p>
<p>index index.php index.html index.htm;<br>这里需要注意的是，将index.php排在最前面</p>
<p>server_name修改</p>
<p>server_name server_domain_or_IP;<br>将server_domain_or_IP修改为你的公网IP</p>
<p>location修改</p>
<p>location / {<br>        try_files $uri $uri/ /index.php?$query_string;<br>}<br>修改完是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    root /var/www/laravel/public;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    server_name server_domain_or_IP;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">            try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们还需要配置一下Nginx，让其执行PHP文件。同样是在这个文件里，在location下方添加下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    root /var/www/laravel/public;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    server_name server_domain_or_IP;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files $uri /index.php =404;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，这一块是自己加上去的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ~ \.php$ &#123;</div><div class="line">       try_files $uri /index.php =404;</div><div class="line">       fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">       fastcgi_pass unix:/var/run/php5-fpm.sock;</div><div class="line">       fastcgi_index index.php;</div><div class="line">       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">       include fastcgi_params;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>配置完之后重启Nginx，使上面的配置项生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure></p>
<h3 id="3-创建Laravel项目"><a href="#3-创建Laravel项目" class="headerlink" title="3.创建Laravel项目"></a>3.创建Laravel项目</h3><p>在配置完nginx后，怎么获取Laravel的项目代码呢？有以下几种方法：</p>
<p>(1).直接composer安装</p>
<p>直接通过composer来安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure></p>
<p>上面命令会安装composer</p>
<p>composer全局使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>
<p>然后在/var/www目录下直接执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo composer create-project laravel/laravel laravel</div></pre></td></tr></table></figure></p>
<p>因为我们之前创建/var/www目录，你可以直接cd /var/www然后执行上面的命令。然后坐等安装完成。</p>
<p>(2).直接上传代码</p>
<p>使用下面命令上传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -r laravel root@your_IP:</div></pre></td></tr></table></figure></p>
<p>然后将laravel移动到/var/www目录下</p>
<p>(3).使用Git和Coding平台</p>
<p>一旦本地代码都推送到Coding，然后在/var/www目录下直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone your-project-git-link</div></pre></td></tr></table></figure></p>
<p>your-project-git-link替换为你Coding上的laravel项目地址</p>
<h3 id="4-最后的最后"><a href="#4-最后的最后" class="headerlink" title="4.最后的最后"></a>4.最后的最后</h3><p>不管哪种方式安装的代码，/var/www/都是属于root用户的，而访问网站的用户则需要正确的权限和访问限制，我们可以通过下面的命令来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R :www-data /var/www/laravel</div></pre></td></tr></table></figure></p>
<p>根据Laravel的官方文档，/var/www/laravel/storage 目录需要给网站的用户写权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R 775 /var/www/laravel/storage</div></pre></td></tr></table></figure></p>
<h3 id="5-在浏览器输入："><a href="#5-在浏览器输入：" class="headerlink" title="5.在浏览器输入："></a>5.在浏览器输入：</h3><p><a href="http://server_domain_or_IP" target="_blank" rel="external">http://server_domain_or_IP</a></p>
<p><em>本文仅做学习使用</em><br><em>来源：</em> <a href="https://laravist.com/article/19" target="_blank" rel="external">https://laravist.com/article/19</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Laravel </tag>
            
            <tag> Nginx </tag>
            
            <tag> MySQL </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java反射]]></title>
      <url>/2017/05/04/Java%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h2 id="Class类的使用"><a href="#Class类的使用" class="headerlink" title="Class类的使用"></a>Class类的使用</h2><p>在面向对象的世界里，万事万物皆对象。<em>(java中，静态的成员，普通数据类型不是对象。)</em><br>类也是对象，是java.lang.Class类的对象。这个对象的三种表示方法：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 第一种，任何一个类都有一个隐含的静态成员变量class</div><div class="line">Class c1 = Foo.class;</div><div class="line">// 第二种，已知该类的对象</div><div class="line">Class c2 = foo1.getClass();</div><div class="line">// 第三种   </div><div class="line">Class c3 = null;</div><div class="line">c3 = Class.forName(&quot;com.example.reflect.Foo&quot;);</div></pre></td></tr></table></figure>
<p><em>说明：</em><br>1) c1, c2, c3 表示了Foo类的类类型(class type)。<br>2) 一个类只可能是Class类的一个实例对象，即c1 == c2 == c3。<br>3) 可以通过类的类类型创建该类的对象。eg:Foo foo = (Foo)c1.newInstance();<br>  前提是：需要有无参数的构造方法。<br>4) 基本的数据类型，void关键字，都存在类类型<br> Class c1 = int.class;       // int的类类型<br> Class c2 = String.class;    // String的类类型<br> Class c3 = double.class;    // double的类类型<br> Class c4 = Double.class;    // Double的类类型，<em>与double.class不同</em><br> Class c5 = vold.class;      // void的类类型</p>
<h2 id="Class类动态加载类"><a href="#Class类动态加载类" class="headerlink" title="Class类动态加载类"></a>Class类动态加载类</h2><p>编译时刻加载类是静态加载类，运行时刻加载类是动态加载类。<br>new创建对象是静态加载类，在编译时刻就需要加载所有可能使用到的类。</p>
<p>动态加载类的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Office.java:</div><div class="line">class Office&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        try&#123;</div><div class="line">            // 动态加载类，在运行时刻加载</div><div class="line">            Class c = Class.forName(args[0]);</div><div class="line">            // 通过类类型，创建该类对象</div><div class="line">            OfficeAble oa = (OfficeAble) c.newInstance();</div><div class="line">            oa.start();</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">OfficeAble.java:</div><div class="line">interface OfficeAble&#123;</div><div class="line">    public void start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Word.java:</div><div class="line">class Word implements OfficeAble&#123;</div><div class="line">    public void start()&#123;</div><div class="line">        System.out.println(&quot;Word start.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="获取类的信息"><a href="#获取类的信息" class="headerlink" title="获取类的信息"></a>获取类的信息</h2><p><em>步骤：</em><br>1) 获取对象的类类型<br>2) 调用API</p>
<p>程序示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">import java.lang.reflect.Constructor;</div><div class="line">import java.lang.reflect.Field;</div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">public class ClassUtil &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        ClassUtil cu = new ClassUtil();</div><div class="line">        String s = &quot;Hello world&quot;;</div><div class="line">        cu.printClassMethodMessage(s);</div><div class="line">        cu.printClassFieldMessage(s);</div><div class="line">        cu.printClassConstructorMessage(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 打印类的方法信息</div><div class="line">     * @param obj</div><div class="line">     */</div><div class="line">    public static void printClassMethodMessage(Object obj)&#123;</div><div class="line">        // 获取对象的类类型</div><div class="line">        Class c = obj.getClass();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Method类，方法对象</div><div class="line">         * 一个成员方法就是一个Method对象</div><div class="line">         * getMethods() 获取所有public方法，包括从父类继承来的方法</div><div class="line">         * getDeclaredMethods() 获取自己声明的全部方法，不论访问权限</div><div class="line">         */</div><div class="line">        Method[] ms = c.getMethods();</div><div class="line"></div><div class="line">        System.out.println(&quot;类的名称是：&quot; + c.getName());</div><div class="line">        System.out.println(&quot;类的方法：&quot;);</div><div class="line">        for(Method method : ms)&#123;</div><div class="line">            // 返回值的类类型</div><div class="line">            Class returnType = method.getReturnType();</div><div class="line">            System.out.print(returnType.getName() + &quot; &quot;);</div><div class="line"></div><div class="line">            // 方法名</div><div class="line">            System.out.print(method.getName() + &quot;(&quot;);</div><div class="line"></div><div class="line">            // 参数列表</div><div class="line">            Class[] parameterTypes = method.getParameterTypes();</div><div class="line">            int parameterLength = parameterTypes.length;</div><div class="line">            if(parameterLength &gt; 0) &#123;</div><div class="line">                if(parameterLength &gt; 1) &#123;</div><div class="line">                    for (int i = 0; i &lt; parameterLength - 1; i++) &#123;</div><div class="line">                        System.out.print(parameterTypes[i].getSimpleName() + &quot;, &quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                System.out.print(parameterTypes[parameterLength - 1].getSimpleName());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(&quot;)&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 打印类的成员变量信息</div><div class="line">     * @param obj</div><div class="line">     */</div><div class="line">    public static void printClassFieldMessage(Object obj)&#123;</div><div class="line">        // 获取对象的类类型</div><div class="line">        Class c = obj.getClass();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Field类，成员变量对象</div><div class="line">         * 一个成员方法就是一个Method对象</div><div class="line">         * getFields() 获取所有public成员变量</div><div class="line">         * getDeclaredFields() 获取自己声明的全部成员变量</div><div class="line">         */</div><div class="line">        Field[] fs = c.getDeclaredFields();</div><div class="line"></div><div class="line">        System.out.println(&quot;类的成员变量：&quot;);</div><div class="line">        for(Field field : fs)&#123;</div><div class="line">            // 得到成员变量的类的类类型</div><div class="line">            Class fieldType = field.getType();</div><div class="line">            String typeName = fieldType.getName();</div><div class="line"></div><div class="line">            // 得到成员变量的名称</div><div class="line">            String fieldName = field.getName();</div><div class="line"></div><div class="line">            System.out.println(fieldType + &quot; &quot; + fieldName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 打印类的构造函数信息</div><div class="line">     * @param obj</div><div class="line">     */</div><div class="line">    public static void printClassConstructorMessage(Object obj)&#123;</div><div class="line">        // 获取对象的类类型</div><div class="line">        Class c = obj.getClass();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Constructor类，构造函数对象</div><div class="line">         * getContructors() 获取所有public构造函数</div><div class="line">         * getDeclaredConstructors() 得到所有的构造函数</div><div class="line">         */</div><div class="line">        Constructor[] cs = c.getDeclaredConstructors();</div><div class="line"></div><div class="line">        System.out.println(&quot;类的构造函数：&quot;);</div><div class="line">        for(Constructor constructor : cs)&#123;</div><div class="line">            System.out.print(constructor.getName() + &quot;(&quot;);</div><div class="line"></div><div class="line">            // 获取参数列表</div><div class="line">            Class[] parameterTypes = constructor.getParameterTypes();</div><div class="line">            int parameterLength = parameterTypes.length;</div><div class="line">            if(parameterLength &gt; 0) &#123;</div><div class="line">                if(parameterLength &gt; 1) &#123;</div><div class="line">                    for (int i = 0; i &lt; parameterLength - 1; i++) &#123;</div><div class="line">                        System.out.print(parameterTypes[i] + &quot;,&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                System.out.print(parameterTypes[parameterLength - 1]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(&quot;)&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法反射的基本操作"><a href="#方法反射的基本操作" class="headerlink" title="方法反射的基本操作"></a>方法反射的基本操作</h2><p>1) 如何获取某个方法： 方法的名称和方法的参数列表才能唯一确定某个方法<br>2) 方法反射的操作： method.invoke(obj, paras…)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Foo&#123;</div><div class="line">    public void print(int a, int b)&#123;</div><div class="line">        System.out.println(a + b);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MethodReflect&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        // 1.获取类类型</div><div class="line">        Foo foo = new Foo();</div><div class="line">        Class c = foo.getClass();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 2.获取方法，名称和参数列表来决定</div><div class="line">         *   getMethod() 获取public方法</div><div class="line">         *   getDeclaredMethod() 获取自己声明的方法</div><div class="line">         */</div><div class="line">        // Method m = c.getMethod(&quot;print&quot;, new Class[]&#123;int.class, int.class&#125;);</div><div class="line">        Method m = c.getMethod(&quot;print&quot;, int.class, int.class);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 3.方法的反射操作</div><div class="line">         * 等同于 foo.print(10, 20);</div><div class="line">         * 方法没有返回值则返回null,否则返回具体的返回值</div><div class="line">         */</div><div class="line">        // Object obj = m.invoke(foo, new Class[]&#123;10, 20&#125;);    </div><div class="line">        Object obj = m.invoke(foo, 10, 20);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="集合中泛型的本质"><a href="#集合中泛型的本质" class="headerlink" title="集合中泛型的本质"></a>集合中泛型的本质</h2><p>Java中集合的泛型是防止错误输入的，只在编译阶段有效，绕过编译就无效了。<em>编译之后集合去泛型化</em></p>
<p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add(&quot;hello&quot;);</div><div class="line">Class c = list.getClass();</div><div class="line">Method m = c.getMethod(&quot;add&quot;, Object.class);</div><div class="line">m.invoke(list, 20);    //没有错误</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu + Docker 学习笔记]]></title>
      <url>/2017/05/02/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><ul>
<li>Docker is the world’s leading software container platform.</li>
<li>Docker公司开发，开源，托管在github</li>
<li>跨平台，支持Windows、Macos、Linux</li>
</ul>
<a id="more"></a>
<h2 id="Docker思想"><a href="#Docker思想" class="headerlink" title="Docker思想"></a>Docker思想</h2><ul>
<li>集装箱</li>
<li>标准化，包括运输方式、存储方式、API接口标准化</li>
<li>隔离（类似于虚拟机，不过更加轻量）</li>
</ul>
<h2 id="Docker核心技术"><a href="#Docker核心技术" class="headerlink" title="Docker核心技术"></a>Docker核心技术</h2><h5 id="镜像（集装箱）–Build"><a href="#镜像（集装箱）–Build" class="headerlink" title="镜像（集装箱）–Build"></a>镜像（集装箱）–Build</h5><p><img src="/uploads/docker-image.png" alt="Alt text"></p>
<h5 id="仓库（超级码头）–Ship"><a href="#仓库（超级码头）–Ship" class="headerlink" title="仓库（超级码头）–Ship"></a>仓库（超级码头）–Ship</h5><p>hub.docker.com 官方<br>c.163.com 网易蜂巢<br><img src="/uploads/docker-repository.png" alt="Alt text"></p>
<h5 id="容器（运行程序的地方）–Run"><a href="#容器（运行程序的地方）–Run" class="headerlink" title="容器（运行程序的地方）–Run"></a>容器（运行程序的地方）–Run</h5><p><img src="/uploads/docker.png" alt="Alt text"></p>
<h2 id="Linux-Ubuntu-安装Docker"><a href="#Linux-Ubuntu-安装Docker" class="headerlink" title="Linux(Ubuntu)安装Docker"></a>Linux(Ubuntu)安装Docker</h2><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install -y docker.io</div><div class="line">// 若要安装最新版本：</div><div class="line">curl -s https://get.docker.com | sh</div></pre></td></tr></table></figure>
<h5 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service docker start</div><div class="line">docker version</div></pre></td></tr></table></figure>
<p>若出现如下结果，表示安装成功：<br><img src="/uploads/docker-success.png" alt=""></p>
<h5 id="第一个Docker镜像：hello-world"><a href="#第一个Docker镜像：hello-world" class="headerlink" title="第一个Docker镜像：hello-world"></a>第一个Docker镜像：hello-world</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker pull hello-world    // 拉取镜像</div><div class="line">docker images    // 查看本地镜像</div><div class="line">docker run hello-world    // 运行</div></pre></td></tr></table></figure>
<h5 id="运行nginx镜像"><a href="#运行nginx镜像" class="headerlink" title="运行nginx镜像"></a>运行nginx镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker pull hub.c.163.com/library/nginx:latest    // 地址来自上述网易蜂巢仓库</div><div class="line">docker run hub.c.163.com/library/nginx    // 前台挂起运行</div><div class="line">docker run -d hub.c.163.com/library/nginx    // 后台运行</div><div class="line">docker ps    // 查看运行中的容器</div><div class="line">docker exec -it ID bash    // 进入容器shell</div></pre></td></tr></table></figure>
<h5 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h5><h6 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h6><p>Bridge： 容器映射到本地主机<br>Host： 容器与主机共用端口<br>None： 没有网络，Docker不与外界通讯</p>
<h6 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射:"></a>端口映射:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 8080:80 hub.c.163.com/library/nginx    // 本地8080与容器80映射    </div><div class="line">docker run -d -P hub.c.163.com/library/nginx    // 所有监听端口与主机映射</div></pre></td></tr></table></figure>
<h5 id="制作自己的镜像"><a href="#制作自己的镜像" class="headerlink" title="制作自己的镜像"></a>制作自己的镜像</h5><p>jpress.war<br>Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from hub.c.163.com/library/tomcat</div><div class="line"></div><div class="line">MAINTAINER Jochen_M xxx@163.com</div><div class="line"></div><div class="line">COPY jpress.war /usr/local/tomcat/webapps</div></pre></td></tr></table></figure></p>
<p>docker build<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker build -t jpress:latest .    // 构建镜像</div><div class="line">docker run -d -p 8888:8080 jpress    // 运行</div></pre></td></tr></table></figure></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker pull [OPTIONS] NAME[:TAG]    // 拉取镜像</div><div class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]    //查看本地镜像</div><div class="line">docker build []-t NAME:TAG]    // 构建镜像</div><div class="line">docker run [-p 8888:8080]/[-P] NAME    // 运行容器</div><div class="line">docker stop NAME</div><div class="line">docker restart NAME</div><div class="line">docker exec -it ID bash    // 进入容器Shell</div></pre></td></tr></table></figure>
<blockquote>
<p>Docker官网<br><a href="https://www.docker.com/" target="_blank" rel="external">]https://www.docker.com/</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo + Github 搭建个人博客]]></title>
      <url>/2017/01/25/Hexo-Github/</url>
      <content type="html"><![CDATA[<h3 id="用Hexo-Github-搭建个人博客的具体步骤如下："><a href="#用Hexo-Github-搭建个人博客的具体步骤如下：" class="headerlink" title="用Hexo + Github 搭建个人博客的具体步骤如下："></a>用Hexo + Github 搭建个人博客的具体步骤如下：</h3><h4 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h4><h5 id="1-点击Github注册账号，已有账号的同学可以跳过。"><a href="#1-点击Github注册账号，已有账号的同学可以跳过。" class="headerlink" title="1.点击Github注册账号，已有账号的同学可以跳过。"></a>1.点击<a href="http://www.github.com" target="_blank" rel="external">Github</a>注册账号，已有账号的同学可以跳过。</h5><h5 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h5><a id="more"></a>
<p>登录账号后，在Github页面的右上方选择New repository，创建一个仓库，仓库名字必须为<code>yourname.github.io</code>,例如：</p>
<p><img src="/uploads/create-new-repository.png" alt="Alt text"></p>
<p>(由于本人已经创建了该仓库，所以出现错误提示！)</p>
<h5 id="3-生成添加密钥："><a href="#3-生成添加密钥：" class="headerlink" title="3.生成添加密钥："></a>3.生成添加密钥：</h5><p>在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;Github注册邮箱地址&quot;</div></pre></td></tr></table></figure></p>
<p>待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub，打开id_rsa.pub,复制里面的所有内容，然后进入<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>:</p>
<p><img src="/uploads/settings-ssh.png" alt="Alt text"></p>
<p>将复制的内容粘贴到Key的输入框，随意起一个Title，点击<code>Add SSH key</code>按钮即可。</p>
<h4 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h4><h4 id="ps：有能力的同学可以自行查看官方文档进行安装配置"><a href="#ps：有能力的同学可以自行查看官方文档进行安装配置" class="headerlink" title="ps：有能力的同学可以自行查看官方文档进行安装配置"></a>ps：有能力的同学可以自行查看<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">官方文档</a>进行安装配置</h4><h5 id="1-在终端切换到放置本地Hexo的目录"><a href="#1-在终端切换到放置本地Hexo的目录" class="headerlink" title="1.在终端切换到放置本地Hexo的目录"></a>1.在终端切换到放置本地Hexo的目录</h5><p><em>强烈建议</em>：<em>不要</em>选择需要管理员权限才能创建文件(夹)的目录。</p>
<h5 id="2-下载安装Hexo"><a href="#2-下载安装Hexo" class="headerlink" title="2.下载安装Hexo"></a>2.下载安装Hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h5 id="3-初始化Hexo"><a href="#3-初始化Hexo" class="headerlink" title="3.初始化Hexo"></a>3.初始化Hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 建立一个Hexo文件夹，&lt;folder&gt;为文件夹名字，名字任意</div><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">// 进入Hexo文件夹</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h5 id="4-配置博客"><a href="#4-配置博客" class="headerlink" title="4.配置博客"></a>4.配置博客</h5><ul>
<li>修改网站相关信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: Jochen-M</div><div class="line">subtitle:</div><div class="line">    description: 每一个不曾起舞的日子都是对生命的辜负！</div><div class="line">    author: Jochen-M</div><div class="line">    language: zh-Hans</div><div class="line">    timezone: Asia/Shanghai</div></pre></td></tr></table></figure>
<p><em>注意</em>：每一项的填写，其:后面都要保留一个空格，下同。</p>
<ul>
<li>配置统一资源定位符（个人域名）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url: http://jochen-m.github.io</div></pre></td></tr></table></figure>
<ul>
<li>配置部署</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repo: http://github.com/Jochen-M/Jochen-M.github.io.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<p>其中repo项是Github上创建好的仓库的地址。</p>
<h4 id="至此，Hexo已经安装配置完成，我们就可以试着发表自己的文章了："><a href="#至此，Hexo已经安装配置完成，我们就可以试着发表自己的文章了：" class="headerlink" title="至此，Hexo已经安装配置完成，我们就可以试着发表自己的文章了："></a>至此，Hexo已经安装配置完成，我们就可以试着发表自己的文章了：</h4><h5 id="新建一篇文章："><a href="#新建一篇文章：" class="headerlink" title="新建一篇文章："></a>新建一篇文章：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 新建一篇文章</div><div class="line">$ hexo new &quot;文章标题&quot;</div></pre></td></tr></table></figure>
<p>新建的markdown文件会保存在Hexo目录下的source/_post文件夹下，我们可以用markdown编辑器打开它进行编辑。</p>
<p><img src="/uploads/sublime-markdown.png" alt="Alt text"></p>
<p>（本人用的markdown编辑器是Sublime Text 3，只需安装markdown相关插件。）</p>
<h5 id="保存后，在本地发布："><a href="#保存后，在本地发布：" class="headerlink" title="保存后，在本地发布："></a>保存后，在本地发布：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 生成静态文件</div><div class="line">$ hexo generate</div><div class="line">// 在本地发布</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>成功后，可以在终端看到如下提示：</p>
<p><img src="/uploads/hexo-server.png" alt="Alt text"></p>
<h5 id="查看效果，在浏览器输入："><a href="#查看效果，在浏览器输入：" class="headerlink" title="查看效果，在浏览器输入："></a>查看效果，在浏览器输入：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:4000</div></pre></td></tr></table></figure>
<p>即可在浏览器看到我们的博客和文章。</p>
<h5 id="但此时，博客仅仅部署在本地，我们需要将博客部署到网上。在终端输入："><a href="#但此时，博客仅仅部署在本地，我们需要将博客部署到网上。在终端输入：" class="headerlink" title="但此时，博客仅仅部署在本地，我们需要将博客部署到网上。在终端输入："></a>但此时，博客仅仅部署在本地，我们需要将博客部署到网上。在终端输入：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>这时，我们的博客就已经部署到网上了。在浏览器输入我们的域名，如：<a href="jochen-m.github.io">jochen-m.github.io</a>。</p>
<blockquote>
<h4 id="推荐："><a href="#推荐：" class="headerlink" title="推荐："></a>推荐：</h4><p>Hexo官方文档：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a><br>Markdown语法说明（中文版）：<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">http://www.appinn.com/markdown/</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<div align="center">最爱全宇宙最最可爱美丽的蕾蕾</div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
